{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"book/mkdocs_deployment_guide.html","title":"Deploying a Static Site with MkDocs and GitHub Pages","text":""},{"location":"book/mkdocs_deployment_guide.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Python installed on your machine.</li> <li>A GitHub account with a repository for your project.</li> </ul>"},{"location":"book/mkdocs_deployment_guide.html#steps","title":"Steps","text":"<ol> <li>Install MkDocs:</li> </ol> <pre><code>pip install mkdocs\npip install mkdocs-material\npip install pymdown-extensions\npip install mkdocs mkdocs-gitbook\npip install mkdocs-minify-plugin\npip install mkdocs-git-revision-date-localized-plugin\n</code></pre> <ol> <li>Initialize MkDocs Project:</li> </ol> <pre><code>mkdocs new my-project\ncd my-project\n</code></pre> <ol> <li>Organize Markdown Files:</li> <li> <p>Place all markdown files in the <code>docs</code> directory.</p> </li> <li> <p>Configure Navigation:</p> </li> <li> <p>Edit <code>mkdocs.yml</code> to define the site's navigation.</p> </li> <li> <p>Build and Serve Locally:</p> </li> </ol> <pre><code>mkdocs build\nmkdocs serve\n</code></pre> <ol> <li>Deploy to GitHub Pages:</li> </ol> <p><pre><code>mkdocs gh-deploy\n</code></pre> 7. github settup  In the setting of the project, click page section, you will see visit pages</p>"},{"location":"book/mkdocs_deployment_guide.html#additional-tips","title":"Additional Tips","text":"<ul> <li>Ensure your GitHub repository is set up to use GitHub Pages.</li> <li>Check the <code>gh-pages</code> branch for the deployed site content.</li> </ul>"},{"location":"book/phase1/linux_basics/01_linux_file_system.html","title":"Linux File System","text":"<p>This section will cover the basics of the Linux file system, including its structure and common commands used to navigate and manage files.</p>"},{"location":"book/phase1/linux_basics/01_linux_file_system.html#concept-explanation","title":"Concept Explanation","text":"<p>The Linux file system is a hierarchical structure for storing and organizing data. It includes directories, files, and links. Common directories include <code>/etc</code> (configuration files), <code>/var</code> (variable data), <code>/home</code> (user directories), and <code>/usr</code> (user programs).</p>"},{"location":"book/phase1/linux_basics/01_linux_file_system.html#common-basic-commands-explanation","title":"Common basic commands &amp; explanation","text":"<ul> <li><code>ls</code>: List directory contents.</li> <li><code>-l</code>: Use long format listing.</li> <li><code>-a</code>: Show all files, including hidden ones.</li> <li><code>-h</code>: Show file sizes in human-readable format (KB, MB, GB).</li> <li><code>-R</code>: List subdirectories recursively.</li> <li><code>cd</code>: Change current directory.</li> <li><code>..</code>: Go back to parent directory.</li> <li><code>~</code>: Go to home directory.</li> <li><code>-</code>: Go to previous directory.</li> <li><code>pwd</code>: Display current directory path.</li> <li><code>mkdir</code>: Create new directory.</li> <li><code>-p</code>: Create parent directories.</li> <li><code>rm</code>: Remove files or directories.</li> <li><code>-r</code>: Remove directories recursively.</li> <li><code>-f</code>: Force removal.</li> <li><code>echo</code>: Print a line of text to the terminal.</li> <li><code>&gt;</code>: Save to a file (overwrite), e.g., <code>echo \"text\" &gt; file.txt</code></li> <li><code>&gt;&gt;</code>: Append to a file, e.g., <code>echo \"text\" &gt;&gt; file.txt</code></li> <li><code>cp</code>: Copy files and directories.</li> <li><code>-r</code>: Copy directories recursively.</li> <li><code>-p</code>: Preserve file attributes.</li> <li><code>-v</code>: Verbose mode, show progress.</li> <li><code>mv</code>: Move or rename files and directories.</li> <li><code>-i</code>: Interactive mode, prompt before overwrite.</li> <li><code>-v</code>: Verbose mode, show what's being moved.</li> <li><code>cat</code>: Display file contents.</li> <li><code>-n</code>: Number all output lines.</li> <li>Use <code>less</code> or <code>more</code> for viewing large files.</li> <li><code>head</code>: Display first part of files.</li> <li><code>-n N</code>: Show first N lines (default: 10).</li> <li><code>-c N</code>: Show first N bytes.</li> <li><code>-q</code>: Never print headers giving file names.</li> <li><code>tail</code>: Display last part of files.</li> <li><code>-n N</code>: Show last N lines (default: 10).</li> <li><code>-f</code>: Follow file growth (useful for log files).</li> <li><code>-F</code>: Same as -f, but retry if file becomes inaccessible.</li> <li><code>grep</code>: Search text using patterns.</li> <li><code>-i</code>: Case-insensitive search.</li> <li><code>-r</code>: Search recursively in directories.</li> <li><code>-n</code>: Show line numbers.</li> <li><code>chmod</code>: Change file permissions.</li> <li><code>+x</code>: Add execute permission.</li> <li><code>u+w</code>: Add write permission for user.</li> <li><code>g+r</code>: Add read permission for group.</li> <li><code>chown</code>: Change file owner and group.</li> <li><code>-R</code>: Change ownership recursively.</li> <li><code>find</code>: Search for files in directory hierarchy.</li> <li><code>-name</code>: Search by name.</li> <li><code>-type</code>: Search by type (f for files, d for directories).</li> <li><code>-size</code>: Search by size.</li> <li><code>tar</code>: Archive files.</li> <li><code>-c</code>: Create archive.</li> <li><code>-x</code>: Extract archive.</li> <li><code>-z</code>: Use gzip compression.</li> <li><code>-f</code>: Specify archive file.</li> <li><code>zip</code>: Archive files.</li> <li><code>-r</code>: Recursively archive directories.</li> <li> <p><code>-q</code>: Quiet mode, suppress output.</p> </li> <li> <p><code>df</code>: Show disk space usage.</p> </li> <li><code>-h</code>: Human-readable sizes.</li> <li><code>du</code>: Show directory space usage.</li> <li><code>-h</code>: Human-readable sizes.</li> <li><code>-s</code>: Summary only.</li> </ul>"},{"location":"book/phase1/linux_basics/01_linux_file_system.html#practical-examples","title":"Practical Examples","text":"<ol> <li>View All Files and Directories:</li> <li>Command: <code>ls -la</code></li> <li>Example: check  <code>/home</code> directory and want to see all files (including hidden ones) with details, run:      <pre><code>ls -la /home\n</code></pre></li> <li> <p>This command will list all files and directories in <code>/home</code>, showing permissions, owner, size, and modification date.</p> </li> <li> <p>Change Directory:</p> </li> <li>Command: <code>cd /var/log</code></li> <li>Example: To check log files, enter the logs directory:      <pre><code>cd /var/log\n</code></pre></li> <li> <p>After this command, your current directory will be <code>/var/log</code>, and you can use other commands like <code>ls</code> to view its contents.</p> </li> <li> <p>Create New Directory:</p> </li> <li>Command: <code>mkdir -p /tmp/newdir</code></li> <li>Example: To create a nested directory structure:      <pre><code>mkdir -p /tmp/newdir/subdir\n</code></pre></li> <li> <p>This creates <code>newdir</code> and <code>subdir</code> under <code>/tmp</code>, even if they don't exist.</p> </li> <li> <p>Remove Directory:</p> </li> <li>Command: <code>rm -rf /tmp/newdir</code></li> <li>Example: To safely remove a directory and all its contents:      <pre><code>rm -rf /tmp/newdir\n</code></pre></li> <li>This command will recursively remove <code>newdir</code> and all its contents without confirmation. If you want to confirm the removal, use <code>rm -r /tmp/newdir</code>.</li> </ol>"},{"location":"book/phase1/linux_basics/01_linux_file_system.html#more-practical-examples","title":"More Practical Examples","text":"<ol> <li>File Operations:</li> <li> <p>Copy Files and Directories:      <pre><code># Copy a file preserving attributes\ncp -p source.txt backup.txt\n\n# Copy directory with all contents\ncp -r /path/to/source_dir /path/to/dest_dir\n</code></pre></p> </li> <li> <p>Move and Rename:      <pre><code># Rename a file\nmv oldname.txt newname.txt\n\n# Move file to another directory\nmv file.txt /path/to/destination/\n\n# Move multiple files\nmv file1.txt file2.txt /path/to/destination/\n</code></pre></p> </li> <li> <p>View File Contents:      <pre><code># View entire file\ncat myfile.txt\n\n# View file with line numbers\ncat -n myfile.txt\n\n# View large file page by page\nless largefile.txt\n\n# View first 5 lines of file\nhead -n 5 myfile.txt\n\n# View last 5 lines of file\ntail -n 5 myfile.txt\n\n# Monitor log file in real-time\ntail -f /var/log/syslog\n</code></pre></p> </li> <li> <p>Search Operations:</p> </li> <li> <p>Find Files:      <pre><code># Find all .txt files in current directory and subdirectories\nfind . -name \"*.txt\"\n\n# Find files larger than 100MB\nfind /home -size +100M\n\n# Find directories\nfind . -type d\n</code></pre></p> </li> <li> <p>Search File Contents:      <pre><code># Search for \"error\" in log file\ngrep \"error\" app.log\n\n# Search recursively in all files\ngrep -r \"TODO\" /path/to/project/\n\n# Case-insensitive search with line numbers\ngrep -in \"warning\" *.log\n</code></pre></p> </li> <li> <p>Archive Management:</p> </li> <li> <p>Create and Extract Archives:      <pre><code># Create a compressed archive\ntar -czf backup.tar.gz /path/to/directory\n\n# Extract a compressed archive\ntar -xzf backup.tar.gz\n\n# List contents of archive\ntar -tf backup.tar.gz\n</code></pre></p> </li> <li> <p>Zip Archive:      <pre><code># Create a zip archive\nzip -r backup.zip /path/to/directory\n\n# Extract a zip archive\nunzip backup.zip\n\n# List contents of zip archive\nunzip -l backup.zip\n</code></pre></p> </li> <li> <p>Disk Usage:</p> </li> <li> <p>Check Space Usage:      <pre><code># Check disk space usage\ndf -h\n\n# Check directory size\ndu -sh /path/to/directory\n\n# Find largest directories\ndu -h /home | sort -rh | head -n 5\n</code></pre></p> </li> <li> <p>Permission Management:</p> </li> <li> <p>Change Permissions:      <pre><code># Make a script executable\nchmod +x script.sh\n\n# Give read permission to group\nchmod g+r file.txt\n\n# Change permissions recursively\nchmod -R 755 /path/to/directory\n</code></pre></p> </li> <li> <p>Change Ownership:      <pre><code># Change file owner\nchown user:group file.txt\n\n# Change ownership recursively\nchown -R user:group /path/to/directory\n</code></pre></p> </li> <li> <p>Text Processing:</p> <ul> <li>Basic Text Operations:   <pre><code># Count lines, words, and characters\nwc myfile.txt\n\n# Sort file contents\nsort names.txt\n\n# Remove duplicate lines\nsort names.txt | uniq\n</code></pre></li> </ul> </li> </ol>"},{"location":"book/phase1/linux_basics/01_linux_file_system.html#common-directory-explanations-and-hands-on-examples","title":"Common Directory Explanations and Hands-on Examples","text":"<ol> <li><code>/etc</code> Directory</li> <li>Description: Stores system and application configuration files.</li> <li> <p>Hands-on Examples:</p> <ul> <li>View network configuration files:    <pre><code>ls /etc/network\n</code></pre></li> <li>Edit hosts file (requires admin privileges):    <pre><code>sudo nano /etc/hosts\n</code></pre></li> </ul> </li> <li> <p><code>/var</code> Directory</p> </li> <li>Description: Used for storing variable data like log files, cache, and temporary files.</li> <li> <p>Hands-on Examples:</p> <ul> <li>View log files:    <pre><code>ls /var/log\n</code></pre></li> <li>Check mail queue (if mail service exists):    <pre><code>ls /var/mail\n</code></pre></li> </ul> </li> <li> <p><code>/home</code> Directory</p> </li> <li>Description: Personal directory for each user, storing user data and configurations.</li> <li> <p>Hands-on Examples:</p> <ul> <li>Go to current user's home directory:    <pre><code>cd ~\n</code></pre></li> <li>View all files and directories for current user:    <pre><code>ls -la ~\n</code></pre></li> </ul> </li> <li> <p><code>/usr</code> Directory</p> </li> <li>Description: Stores user-level programs and data, typically containing binaries, libraries, and shared data.</li> <li>Hands-on Examples:<ul> <li>View executable files:    <pre><code>ls /usr/bin\n</code></pre></li> <li>View shared libraries:    <pre><code>ls /usr/lib\n</code></pre></li> </ul> </li> </ol>"},{"location":"book/phase1/linux_basics/01_linux_file_system.html#practice-questions","title":"Practice Questions","text":"<p>Let's practice the commands we've learned with a comprehensive exercise:</p> <ol> <li> <p>Create the following directory structure: <pre><code>test/\n\u251c\u2500\u2500 a/\n\u2502   \u251c\u2500\u2500 test1.txt\n\u2502   \u2514\u2500\u2500 test2.txt\n\u251c\u2500\u2500 b/\n\u2502   \u2514\u2500\u2500 test3.txt\n\u251c\u2500\u2500 c/\n\u2502   \u2514\u2500\u2500 test4.txt\n\u251c\u2500\u2500 test5.txt\n\u2514\u2500\u2500 test6.txt\n</code></pre></p> </li> <li> <p>Perform these operations:</p> </li> <li>Rename <code>test5.txt</code> to <code>test7.txt</code></li> <li>Remove <code>test6.txt</code></li> <li>Display the modification time of <code>test1.txt</code></li> <li>Add the text \"hello world\" to both <code>test1.txt</code> and <code>test2.txt</code></li> <li>Show the contents of both modified files</li> <li>Display the final directory structure</li> <li>Check and compare the sizes of:<ul> <li>Original test directory</li> <li>Directory 'a'</li> <li>Both archive files</li> </ul> </li> <li>Add multiple lines of text to test1.txt:      <pre><code>Line 1\nLine 2\nLine 3\nLine 4\nLine 5\n</code></pre></li> <li>Display only the first 3 lines of test1.txt</li> <li>Display only the last 2 lines of test1.txt</li> <li>Monitor test1.txt for changes in real-time (use tail -f)</li> <li> <p>Show the contents of both modified files</p> </li> <li> <p>Archive operations:</p> </li> <li>Create a tar archive of the entire test directory named <code>test_backup.tar.gz</code></li> <li>Create a zip archive of only the <code>a</code> directory named <code>a_backup.zip</code></li> <li>List the contents of both archives</li> <li>Create a new directory called <code>restore</code></li> <li>Extract both archives into the <code>restore</code> directory</li> <li>Compare the contents of original and restored directories</li> </ol>"},{"location":"book/phase1/linux_basics/01_linux_file_system.html#answers","title":"Answers","text":"<p>Here's how to complete each task:</p> <ol> <li> <p>Create the directory structure: <pre><code># Create directories\nmkdir -p test/{a,b,c}\n\n# Create files\ntouch test/a/test{1,2}.txt\ntouch test/b/test3.txt\ntouch test/c/test4.txt\ntouch test/{test5,test6}.txt\n</code></pre></p> </li> <li> <p>Perform the operations: <pre><code># Rename file\nmv test/test5.txt test/test7.txt\n\n# Remove file\nrm test/test6.txt\n\n# Check file time\nls -l test/a/test1.txt\n\n# Add content to files\necho \"hello world\" &gt; test/a/test1.txt\necho \"hello world\" &gt; test/a/test2.txt\n\n# View contents\ncat test/a/test1.txt\ncat test/a/test2.txt\n\n# View structure\ntree test\n\n# Add multiple lines to test1.txt\necho -e \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\" &gt; test/a/test1.txt\n\n# Display first 3 lines\nhead -n 3 test/a/test1.txt\n\n# Display last 2 lines\ntail -n 2 test/a/test1.txt\n\n# Monitor file (Ctrl+C to stop)\ntail -f test/a/test1.txt\n\n# View contents\ncat test/a/test1.txt\n</code></pre></p> </li> <li> <p>Archive operations: <pre><code># Create tar archive\ntar -czf test_backup.tar.gz test/\n\n# Create zip archive of directory 'a'\ncd test &amp;&amp; zip -r ../a_backup.zip a/ &amp;&amp; cd ..\n\n# List archive contents\ntar -tvf test_backup.tar.gz\nunzip -l a_backup.zip\n\n# Check sizes\necho \"Directory sizes:\"\ndu -sh test/         # Total test directory size\ndu -sh test/a/       # Directory 'a' size\n\necho \"Archive sizes:\"\nls -lh test_backup.tar.gz  # Tar archive size\nls -lh a_backup.zip        # Zip archive size\n\n# Create restore directory and extract archives\nmkdir restore\ncd restore\ntar -xzf ../test_backup.tar.gz\nunzip ../a_backup.zip\n\n# Compare original and restored directories\ndiff -r test/ restore/test/\ndiff -r test/a/ restore/a/\n</code></pre></p> </li> </ol> <p>Example output of size checks: <pre><code>Directory sizes:\n4.0K    test/\n2.0K    test/a/\n\nArchive sizes:\n2.8K    test_backup.tar.gz\n1.5K    a_backup.zip\n</code></pre></p> <p>Final directory structure with sizes: <pre><code>.\n\u251c\u2500\u2500 test/\n\u2502   \u251c\u2500\u2500 a/\n\u2502   \u2502   \u251c\u2500\u2500 test1.txt (contains \"hello world\" and multiple lines)\n\u2502   \u2502   \u2514\u2500\u2500 test2.txt (contains \"hello world\")\n\u2502   \u251c\u2500\u2500 b/\n\u2502   \u2502   \u2514\u2500\u2500 test3.txt\n\u2502   \u251c\u2500\u2500 c/\n\u2502   \u2502   \u2514\u2500\u2500 test4.txt\n\u2502   \u2514\u2500\u2500 test7.txt\n\u251c\u2500\u2500 test_backup.tar.gz\n\u251c\u2500\u2500 a_backup.zip\n\u2514\u2500\u2500 restore/\n    \u251c\u2500\u2500 test/  (from tar archive)\n    \u2502   \u251c\u2500\u2500 a/\n    \u2502   \u2502   \u251c\u2500\u2500 test1.txt\n    \u2502   \u2502   \u2514\u2500\u2500 test2.txt\n    \u2502   \u251c\u2500\u2500 b/\n    \u2502   \u2502   \u2514\u2500\u2500 test3.txt\n    \u2502   \u251c\u2500\u2500 c/\n    \u2502   \u2502   \u2514\u2500\u2500 test4.txt\n    \u2502   \u2514\u2500\u2500 test7.txt\n    \u2514\u2500\u2500 a/    (from zip archive)\n        \u251c\u2500\u2500 test1.txt\n        \u2514\u2500\u2500 test2.txt\n</code></pre></p> <p>This exercise helps practice: - Directory and file creation - File operations (move, remove) - File inspection and modification - Directory structure viewing - Archive creation and extraction with tar and zip - Directory comparison and verification - Size checking of files and directories - Understanding compression ratios</p>"},{"location":"book/phase1/linux_basics/02_permission_management.html","title":"Introduction to Linux File Permissions","text":"<p>Understanding file permissions is crucial for managing a Linux system securely and effectively. This guide introduces the fundamental concepts, commands, practical examples, exercises with answers, and references to help beginners grasp Linux file permissions.</p>"},{"location":"book/phase1/linux_basics/02_permission_management.html#basic-concepts","title":"Basic Concepts","text":"<p>In Linux, each file and directory has an associated set of permissions that determine who can read, write, or execute them. These permissions are defined for three categories:</p> <ul> <li>User (u): The owner of the file.</li> <li>Group (g): A set of users who share access rights.</li> <li>Others (o): All other users.</li> </ul> <p>The permissions are represented as a string of 10 characters, for example: <code>-rwxr-xr--</code>. Here's a breakdown:</p> <ul> <li>The first character indicates the type:</li> <li><code>-</code>: Regular file</li> <li><code>d</code>: Directory</li> <li><code>l</code>: Symbolic link</li> <li>The next nine characters are divided into three sets of three:</li> <li>User permissions: <code>rwx</code> (read, write, execute)</li> <li>Group permissions: <code>r-x</code> (read, execute)</li> <li>Others permissions: <code>r--</code> (read)</li> </ul> <p>Each permission is represented by a character:</p> <ul> <li><code>r</code>: Read permission</li> <li><code>w</code>: Write permission</li> <li><code>x</code>: Execute permission</li> <li><code>-</code>: No permission</li> </ul>"},{"location":"book/phase1/linux_basics/02_permission_management.html#viewing-permissions","title":"Viewing Permissions","text":"<p>To view the permissions of files and directories, use the <code>ls -l</code> command:</p> <pre><code>ls -l\n</code></pre> <p>This command lists files and directories in the current directory along with their permissions, ownership, and other details.</p> <p>Output looks like:</p> <pre><code>total 24\n-rwxrwxrwx 1 1025 users 11357 Dec  9 23:21  LICENSE\n-rw-r--r-- 1 1025 users  1841 Jan 30 21:15 'LICENSE copy'\n-rwxrwxrwx 1 1025 users  4084 Jan 30 22:34  README.md\ndrwxrwxrwx 1 1025 users   102 Jan 30 22:15  docs\ndrwxrwxrwx 1 1025 users   140 Jan 30 20:26  experiment\n-rw-r--r-- 1 1025 users  3699 Jan 30 22:26  mkdocs.yml\ndrwxrwxrwx 1 1025 users   174 Jan 30 22:31  site\n</code></pre>"},{"location":"book/phase1/linux_basics/02_permission_management.html#changing-permissions","title":"Changing Permissions","text":"<p>The <code>chmod</code> (change mode) command is used to modify file and directory permissions. There are two methods to specify permissions: symbolic and numeric.</p>"},{"location":"book/phase1/linux_basics/02_permission_management.html#symbolic-method","title":"Symbolic Method","text":"<p>The symbolic method uses letters to represent permissions and operations:</p> <ul> <li> <p><code>u</code>: User</p> </li> <li> <p><code>g</code>: Group</p> </li> <li> <p><code>o</code>: Others</p> </li> <li> <p><code>a</code>: All (user, group, and others)</p> </li> </ul> <p>Operations:</p> <ul> <li> <p><code>+</code>: Add permission</p> </li> <li> <p><code>-</code>: Remove permission</p> </li> <li> <p><code>=</code>: Set exact permission</p> </li> </ul> <p>Examples:</p> <ul> <li>Add execute permission for the user:</li> </ul> <pre><code>chmod u+x filename\n</code></pre> <ul> <li>Remove write permission for the group:</li> </ul> <pre><code>chmod g-w filename\n</code></pre> <ul> <li>Set read and write permissions for all:</li> </ul> <pre><code>chmod a=rw filename\n</code></pre>"},{"location":"book/phase1/linux_basics/02_permission_management.html#numeric-method","title":"Numeric Method","text":"<p>The numeric method uses octal numbers to represent permissions:</p> <ul> <li> <p><code>4</code>: Read</p> </li> <li> <p><code>2</code>: Write</p> </li> <li> <p><code>1</code>: Execute</p> </li> </ul> <p>Combine these values to set permissions. For example:</p> <ul> <li> <p><code>7</code> (4+2+1): Read, write, and execute</p> </li> <li> <p><code>6</code> (4+2): Read and write</p> </li> <li> <p><code>5</code> (4+1): Read and execute</p> </li> <li> <p><code>4</code>: Read only</p> </li> </ul> <p>The permissions are set in the order of user, group, and others. For example:</p> <pre><code>chmod 755 filename\n</code></pre> <p>This sets:</p> <ul> <li> <p>User: Read, write, execute (<code>7</code>)</p> </li> <li> <p>Group: Read, execute (<code>5</code>)</p> </li> <li> <p>Others: Read, execute (<code>5</code>)</p> </li> </ul>"},{"location":"book/phase1/linux_basics/02_permission_management.html#changing-ownership","title":"Changing Ownership","text":"<p>The <code>chown</code> (change owner) command changes the ownership of a file or directory:</p> <pre><code>chown user:group filename\n</code></pre> <ul> <li> <p><code>user</code>: New owner</p> </li> <li> <p><code>group</code>: New group</p> </li> </ul> <p>To change only the user or group:</p> <ul> <li>Change user:</li> </ul> <pre><code>chown user filename\n</code></pre> <ul> <li>Change group:</li> </ul> <pre><code>chown :group filename\n</code></pre>"},{"location":"book/phase1/linux_basics/02_permission_management.html#user-management-and-information","title":"User Management and Information","text":"<p>In Linux, understanding user management is crucial as it's closely tied to file permissions. Here are essential commands for viewing and managing user information:</p>"},{"location":"book/phase1/linux_basics/02_permission_management.html#basic-user-commands","title":"Basic User Commands","text":"<ol> <li>View Current User</li> </ol> <pre><code>whoami\n</code></pre> <p>Shows the username of the currently logged-in user.</p> <ol> <li>View User ID and Groups</li> </ol> <pre><code>id\n</code></pre> <p>Displays detailed information about your user ID (UID), primary group ID (GID), and supplementary groups.</p> <ol> <li>List User Groups</li> </ol> <pre><code>groups\n</code></pre> <p>Shows all groups the current user belongs to.</p> <ol> <li>View Logged-in Users</li> </ol> <pre><code>who\n</code></pre> <p>Lists all users currently logged into the system.</p> <ol> <li>Detailed User Activity</li> </ol> <pre><code>w\n</code></pre> <p>Shows who is logged in and what they're doing.</p>"},{"location":"book/phase1/linux_basics/02_permission_management.html#understanding-user-information-output","title":"Understanding User Information Output","text":"<p>When you run <code>id</code>, you'll see output like:</p> <pre><code>id\n&gt;&gt;&gt; uid=1000(username) gid=1000(primary_group) groups=1000(primary_group),4(adm),24(cdrom),27(sudo)\n</code></pre> <p>This shows:</p> <ul> <li>Your user ID (uid)</li> <li>Your primary group ID (gid)</li> <li>All groups you belong to</li> </ul>"},{"location":"book/phase1/linux_basics/02_permission_management.html#practical-examples","title":"Practical Examples","text":"<ol> <li>Check Your Username:</li> </ol> <pre><code>whoami\n</code></pre> <p>Output example: <code>john</code></p> <ol> <li>View Your Group Memberships:</li> </ol> <pre><code>groups\n</code></pre> <p>Output example: <code>john adm cdrom sudo</code></p> <ol> <li>Get Detailed User Information:</li> </ol> <pre><code>id\n</code></pre> <p>Output example: <code>uid=1000(john) gid=1000(john) groups=1000(john),4(adm),27(sudo)</code></p>"},{"location":"book/phase1/linux_basics/02_permission_management.html#exercises","title":"Exercises","text":"<p>Test your understanding with the following exercises:</p>"},{"location":"book/phase1/linux_basics/02_permission_management.html#exercise-1-permission","title":"Exercise 1 Permission","text":"<p>Create a file named <code>experiment/test.sh</code> with content</p> <pre><code>echo \"hello world\"\n</code></pre> <p>and set its permissions so that:</p> <ul> <li>The user can read, write, and execute.</li> <li>The group can read and execute.</li> <li>Others have no permissions.</li> <li>you (the user) can run the file by typing <code>bash experiment/test.sh</code> which returned \"hello world\"</li> </ul> <p>Try you self first and then check with the following solusion to compare the status of the file. Solution may not be unique</p> <p>Solution:</p> <pre><code># Create the file\ntouch experiment/test.sh\necho \"echo 'hello world' &gt; experiment/test.sh\nls -l experiment/test.sh\n-rw-r--r-- 1 user group 0 Jan 30 22:49 experiment/test.sh    # Initial state\n\n# Add content to the file\n\n\n# Change permissions\nchmod 750 experiment/test.sh\nls -l experiment/test.sh\n-rwxr-x--- 1 user group 11 Jan 30 22:49 experiment/test.sh   # Final state\n</code></pre>"},{"location":"book/phase1/linux_basics/02_permission_management.html#exercise-2-owner","title":"Exercise 2 Owner","text":"<p>Before doing the excersie, please follow the step to open the root user in mac if you are mac user</p> <p>Use Directory Utility: https://support.apple.com/en-gb/102367   Use Spotlight to find and open Directory Utility, or follow these steps:</p> <p>From the menu bar in the Finder, choose Go &gt; Go to Folder.</p> <p>Type or paste /System/Library/CoreServices/Applications/, then press Return.</p> <p>Open Directory Utility from the window that opens.</p> <p>To enable or disable the root user   In the Directory Utility window, click the lock lock icon, then enter an administrator name and password.</p> <p>To enable the root user, choose Edit &gt; Enable Root User from the menu bar. Then enter the password you want to use. You can then log in as the root user.</p> <p>To disable the root user, choose Edit &gt; Disable Root User.</p> <p>Complex Directory and File Permissions</p> <p>First, let's check the current system users and groups:</p> <ol> <li>Check system information:</li> </ol> <pre><code># Check current user and groups\nwhoami # show current user\nid -gn # show current user's group\n\n# View available system users\ncat /etc/passwd | grep -E '/bin/bash|/bin/sh'\n\n# View system groups\ncat /etc/group | grep -E 'root|nobody|users|wheel'\n</code></pre> <p>Now, create a project structure under the experiment folder with specific ownership and permissions:</p> <ol> <li>Create the following structure:</li> </ol> <pre><code>experiment/\n\u2514\u2500\u2500 project/\n    \u251c\u2500\u2500 src/\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 config.json\n    \u2514\u2500\u2500 logs/\n        \u2514\u2500\u2500 app.log\n</code></pre> <ol> <li>Set up the following requirements:</li> <li>The <code>experiment/project</code> directory should be owned by your current user and group <code>users</code></li> <li>The <code>experiment/project/src</code> directory and its contents should be:<ul> <li>Owned by your current user and group <code>root</code></li> <li>Root group members can read and execute the directory</li> <li>Others can only execute the directory</li> </ul> </li> <li>For <code>experiment/project/src/main.py</code>:<ul> <li>Owned by your current user and group <code>root</code></li> <li>Your user can read and write</li> <li>Root group can only read</li> <li>Others have no permissions</li> </ul> </li> <li>For <code>experiment/project/src/config.json</code>:<ul> <li>Owned by <code>root</code> user and group <code>root</code></li> <li>Only root can read and write</li> <li>No permissions for anyone else</li> </ul> </li> <li> <p>The <code>experiment/project/logs</code> directory and <code>app.log</code>:</p> <ul> <li>Owned by your current user and group <code>nobody</code></li> <li>Your user and nobody group can read and write</li> <li>Others can only read</li> </ul> </li> <li> <p>for mac user, change group 'root' to 'wheel', and change group 'users' to 'staff', which is a different in linux and mac</p> </li> </ol> <p>Solution:</p> <p>Solution for macOS:</p> <pre><code># First, check your username and groups\nCURRENT_USER=$(whoami)\n\n# Create directory structure\nmkdir -p experiment/project/src experiment/project/logs\ntouch experiment/project/src/main.py experiment/project/src/config.json experiment/project/logs/app.log\n\n# Set directory ownership\n# Use wheel group instead of users group (macOS specific)\nchown ${CURRENT_USER}:staff experiment/project\nchown -R ${CURRENT_USER}:wheel experiment/project/src\n# Only root can own and access this file\nsudo chown root:wheel experiment/project/src/config.json\nchown -R $CURRENT_USER:staff experiment/project/logs\n\n# Set directory permissions\nchmod 755 experiment/project          # rwxr-xr-x (everyone can read and execute)\nchmod 750 experiment/project/src      # rwxr-x--- (only owner and wheel group)\nchmod 755 experiment/project/logs     # rwxr-xr-x (everyone can read and execute)\n\n# Set file permissions\nchmod 640 experiment/project/src/main.py     # rw-r----- (owner can read/write, wheel group can read)\nchmod 600 experiment/project/src/config.json  # rw------- (only root can access)\nchmod 664 experiment/project/logs/app.log     # rw-rw-r-- (owner and staff group can read/write)\n</code></pre> <p>Verify the setup with:</p> <pre><code># Check all permissions and ownership\nls -la experiment/project/\n\n# Verify specific permissions\necho \"Testing owner permissions...\"\ntest -r experiment/project/src/main.py &amp;&amp; echo \"\u2713 Can read main.py\" || echo \"\u2717 Cannot read main.py\"\ntest -w experiment/project/src/main.py &amp;&amp; echo \"\u2713 Can write main.py\" || echo \"\u2717 Cannot write main.py\"\n\necho -e \"\\nTesting root-owned file...\"\nsudo test -r experiment/project/src/config.json &amp;&amp; echo \"\u2713 Root can read config.json\" || echo \"\u2717 Root cannot read config.json\"\nsudo test -w experiment/project/src/config.json &amp;&amp; echo \"\u2713 Root can write config.json\" || echo \"\u2717 Root cannot write config.json\"\n\necho -e \"\\nTesting log file permissions...\"\ntest -w experiment/project/logs/app.log &amp;&amp; echo \"\u2713 Can write to app.log\" || echo \"\u2717 Cannot write to app.log\"\n</code></pre> <p>Key differences for macOS:</p> <ol> <li>Using <code>wheel</code> group instead of <code>root</code> group (wheel is the admin group in macOS)</li> <li>Using <code>staff</code> group for general access (common group for macOS users)</li> <li>Root user must be enabled to use root ownership</li> <li>Using <code>sudo</code> for root operations</li> <li>Group permissions focus on <code>wheel</code> and <code>staff</code> instead of custom groups</li> </ol> <p>Note: To use these commands effectively:</p> <ul> <li>Root user must be enabled (see Directory Utility instructions above)</li> <li>Your user must be a member of the wheel group</li> <li>Use <code>sudo</code> when changing ownership to root</li> <li>The <code>staff</code> group is used instead of <code>nobody</code> as it's more common in macOS</li> </ul>"},{"location":"book/phase1/linux_basics/02_permission_management.html#exercise-3","title":"Exercise 3","text":"<p>Remove write permission for others from all files in the current directory. Solution:</p> <pre><code>chmod o-w *\n</code></pre>"},{"location":"book/phase1/linux_basics/02_permission_management.html#exercise-4","title":"Exercise 4","text":"<p>Testing File Permissions with Bash Scripts</p> <p>Create a set of test files with different permissions and verify access:</p> <ol> <li>Create the following test files under <code>experiment/permission_test/</code>:</li> </ol> <pre><code>experiment/permission_test/\n\u251c\u2500\u2500 read_only.sh        # Only readable\n\u251c\u2500\u2500 write_only.sh       # Only writable\n\u251c\u2500\u2500 execute_only.sh     # Only executable\n\u251c\u2500\u2500 read_write.sh       # Readable and writable\n\u251c\u2500\u2500 read_execute.sh     # Readable and executable\n\u2514\u2500\u2500 test_permissions.sh # Main test script\n</code></pre> <ol> <li>Set up the test files with this content:</li> </ol> <p>For <code>test_permissions.sh</code>:</p> <pre><code>#!/bin/bash\n\n# Colors for output\nGREEN='\\033[0;32m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\ncheck_permission() {\n    local file=$1\n    local expected=$2\n    local desc=$3\n\n    # Test read permission\n    if echo \"$expected\" | grep -q \"r\"; then\n        if cat \"$file\" &gt;/dev/null 2&gt;&amp;1; then\n            echo -e \"${GREEN}\u2713 Can read $file (Expected)${NC}\"\n        else\n            echo -e \"${RED}\u2717 Cannot read $file (Should be readable)${NC}\"\n            return 1\n        fi\n    else\n        if cat \"$file\" &gt;/dev/null 2&gt;&amp;1; then\n            echo -e \"${RED}\u2717 Can read $file (Should not be readable)${NC}\"\n            return 1\n        else\n            echo -e \"${GREEN}\u2713 Cannot read $file (Expected)${NC}\"\n        fi\n    fi\n\n    # Test write permission\n    if echo \"$expected\" | grep -q \"w\"; then\n        if echo \"test\" 2&gt;/dev/null &gt;&gt;\"$file\"; then\n            echo -e \"${GREEN}\u2713 Can write to $file (Expected)${NC}\"\n        else\n            echo -e \"${RED}\u2717 Cannot write to $file (Should be writable)${NC}\"\n            return 1\n        fi\n    else\n        if echo \"test\" 2&gt;/dev/null &gt;&gt;\"$file\"; then\n            echo -e \"${RED}\u2717 Can write to $file (Should not be writable)${NC}\"\n            return 1\n        else\n            echo -e \"${GREEN}\u2713 Cannot write to $file (Expected)${NC}\"\n        fi\n    fi\n\n    # Test execute permission\n    if echo \"$expected\" | grep -q \"x\"; then\n        if [ -x \"$file\" ]; then\n            echo -e \"${GREEN}\u2713 Can execute $file (Expected)${NC}\"\n        else\n            echo -e \"${RED}\u2717 Cannot execute $file (Should be executable)${NC}\"\n            return 1\n        fi\n    else\n        if [ -x \"$file\" ]; then\n            echo -e \"${RED}\u2717 Can execute $file (Should not be executable)${NC}\"\n            return 1\n        else\n            echo -e \"${GREEN}\u2713 Cannot execute $file (Expected)${NC}\"\n        fi\n    fi\n\n    echo \"----------------------------------------\"\n    return 0\n}\n\n# Test each file\necho \"Testing file permissions...\"\necho \"----------------------------------------\"\n\ncheck_permission \"read_only.sh\" \"r\" \"read-only file\"\ncheck_permission \"write_only.sh\" \"w\" \"write-only file\"\ncheck_permission \"execute_only.sh\" \"x\" \"execute-only file\"\ncheck_permission \"read_write.sh\" \"rw\" \"read-write file\"\ncheck_permission \"read_execute.sh\" \"rx\" \"read-execute file\"\n</code></pre> <ol> <li>Create the test files and set their permissions:</li> </ol> <pre><code># Create test directory\nmkdir -p experiment/permission_test\ncd experiment/permission_test\n\n# Create test files with some content\necho \"echo 'This is a read-only file'\" &gt; read_only.sh\necho \"echo 'This is a write-only file'\" &gt; write_only.sh\necho \"echo 'This is an execute-only file'\" &gt; execute_only.sh\necho \"echo 'This is a read-write file'\" &gt; read_write.sh\necho \"echo 'This is a read-execute file'\" &gt; read_execute.sh\n\n# Copy the test_permissions.sh content from above\ncat &gt; test_permissions.sh &lt;&lt; 'EOF'\n#!/bin/bash\n# ... (content from above) ...\nEOF\n\n# Set different permissions\nchmod 444 read_only.sh      # r--r--r--\nchmod 222 write_only.sh     # -w--w--w-\nchmod 111 execute_only.sh   # --x--x--x\nchmod 666 read_write.sh     # rw-rw-rw-\nchmod 555 read_execute.sh   # r-xr-xr-x\nchmod 755 test_permissions.sh # Make test script executable\n\n# Run the test\n./test_permissions.sh\n</code></pre> <p>The test script will:</p> <ol> <li>Check each file's permissions</li> <li>Compare them with expected permissions</li> <li>Show green \u2713 for correct permissions</li> <li>Show red \u2717 for incorrect permissions</li> <li>Explain what's wrong if permissions don't match</li> </ol> <p>This exercise helps you:</p> <ul> <li>Understand how to test file permissions programmatically</li> <li>See the effects of different permission combinations</li> <li>Learn how to verify if permissions match requirements</li> <li>Practice using chmod with different permission patterns</li> </ul>"},{"location":"book/phase1/linux_basics/02_permission_management.html#test-questions","title":"Test Questions","text":"<ol> <li>How do you display your current username in the terminal?</li> <li>Which command shows all groups a user belongs to?</li> <li>What command provides the most detailed information about user ID and group memberships?</li> <li>How can you see who is currently logged into the system?</li> <li>What command shows both logged-in users and their current activities?</li> </ol>"},{"location":"book/phase1/linux_basics/02_permission_management.html#references","title":"References","text":"<p>For further reading, consider the following resources:</p> <ul> <li> <p>An Introduction to Linux Permissions</p> </li> <li> <p>Linux file permissions explained</p> </li> <li> <p>Practice Linux Permissions Basics with 13 Easy Questions [Part I]</p> </li> </ul> <p>Understanding and managing file permissions are fundamental skills for Linux users and administrators. Practice these commands and concepts to enhance your proficiency in handling Linux file systems securely.</p>"},{"location":"book/phase1/linux_basics/03_network_basics.html","title":"Network Basics","text":"<p>This section will introduce basic networking concepts in Linux, including configuring network interfaces and using tools like ping and netstat.</p>"},{"location":"book/phase1/linux_basics/03_network_basics.html#_1","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>\u7f51\u7edc\u57fa\u7840\u6d89\u53ca\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u5305\u62ec IP \u5730\u5740\u3001\u5b50\u7f51\u63a9\u7801\u548c\u7f51\u5173\u7684\u914d\u7f6e\u3002</p>"},{"location":"book/phase1/linux_basics/03_network_basics.html#_2","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li><code>ifconfig</code>\uff1a\u914d\u7f6e\u7f51\u7edc\u63a5\u53e3\u3002</li> <li><code>interface</code>\uff1a\u7f51\u7edc\u63a5\u53e3\u540d\u79f0\u3002</li> <li><code>up</code>\uff1a\u542f\u7528\u63a5\u53e3\u3002</li> <li><code>down</code>\uff1a\u7981\u7528\u63a5\u53e3\u3002</li> <li><code>ping</code>\uff1a\u6d4b\u8bd5\u7f51\u7edc\u8fde\u901a\u6027\u3002</li> <li><code>-c</code>\uff1a\u53d1\u9001\u7684\u5305\u6570\u3002</li> </ul>"},{"location":"book/phase1/linux_basics/03_network_basics.html#_3","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":"<ol> <li>Enabling a Network Interface:</li> <li>Command: <code>ifconfig eth0 up</code></li> <li> <p>Step-by-Step:</p> <ol> <li>Open a terminal.</li> <li>To enable the network interface <code>eth0</code>, execute:     <pre><code>sudo ifconfig eth0 up\n</code></pre></li> <li>Verify the interface is up by running:     <pre><code>ifconfig eth0\n</code></pre></li> <li>This command enables the specified network interface, making it ready for network communication.</li> </ol> </li> <li> <p>Testing Network Connectivity:</p> </li> <li>Command: <code>ping -c 4 google.com</code></li> <li> <p>Step-by-Step:</p> <ol> <li>Open a terminal.</li> <li>To test connectivity to Google's servers, use:     <pre><code>ping -c 4 google.com\n</code></pre></li> <li>Observe the results to see if packets are successfully sent and received.</li> <li>This command sends 4 packets to <code>google.com</code> and reports the response time, helping to diagnose connectivity issues.</li> </ol> </li> <li> <p>Viewing Current Network Configuration:</p> </li> <li>Command: <code>ifconfig</code></li> <li>Step-by-Step:<ol> <li>Open a terminal.</li> <li>To view the current network configuration, simply type:     <pre><code>ifconfig\n</code></pre></li> <li>Review the output to see details about all network interfaces, including IP addresses and status.</li> <li>This command provides a snapshot of the current network settings and status of all interfaces.</li> </ol> </li> </ol>"},{"location":"book/phase1/linux_basics/03_network_basics.html#_4","title":"\u6d4b\u8bd5\u9898\u76ee","text":"<ol> <li>\u5982\u4f55\u67e5\u770b\u5f53\u524d\u7f51\u7edc\u63a5\u53e3\u7684\u914d\u7f6e\uff1f</li> <li>\u4f7f\u7528\u54ea\u4e2a\u547d\u4ee4\u53ef\u4ee5\u6d4b\u8bd5\u4e0e\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u8fde\u901a\u6027\uff1f</li> <li>\u5982\u4f55\u542f\u7528\u6216\u7981\u7528\u7f51\u7edc\u63a5\u53e3\uff1f</li> </ol>"},{"location":"book/phase1/linux_basics/04_text_editors.html","title":"Text Editors","text":""},{"location":"book/phase1/linux_basics/04_text_editors.html#concept-explanation","title":"Concept Explanation","text":"<p>Text editors are used to create and modify text files. Commonly used editors include Vim and Nano.</p>"},{"location":"book/phase1/linux_basics/04_text_editors.html#parameter-explanation","title":"Parameter Explanation","text":"<ul> <li>Vim\uff1aAdvanced text editor.</li> <li><code>i</code>\uff1aEnter insert mode.</li> <li><code>:wq</code>\uff1aSave and exit.</li> <li>Nano\uff1aSimple and easy-to-use editor.</li> <li><code>CTRL + O</code>\uff1aSave file.</li> <li><code>CTRL + X</code>\uff1aExit editor.</li> </ul>"},{"location":"book/phase1/linux_basics/04_text_editors.html#practical-examples","title":"Practical Examples","text":"<ol> <li>Editing a File with Vim:</li> <li>Command: <code>vim file.txt</code></li> <li> <p>Step-by-Step:</p> <ol> <li>Open a terminal.</li> <li>To edit a file named <code>file.txt</code>, type:     <pre><code>vim file.txt\n</code></pre></li> <li>Press <code>i</code> to enter insert mode, allowing you to edit the text.</li> <li>After making changes, press <code>ESC</code> to exit insert mode.</li> <li>Type <code>:wq</code> and press <code>Enter</code> to save your changes and exit Vim.</li> <li>Vim is a powerful editor with many features, but it requires learning basic commands for efficient use.</li> </ol> </li> <li> <p>Editing a File with Nano:</p> </li> <li>Command: <code>nano file.txt</code></li> <li>Step-by-Step:<ol> <li>Open a terminal.</li> <li>To edit a file named <code>file.txt</code>, type:     <pre><code>nano file.txt\n</code></pre></li> <li>Make your desired changes directly in the editor.</li> <li>Press <code>CTRL + O</code> to save your changes. You will be prompted to confirm the filename.</li> <li>Press <code>Enter</code> to confirm and save.</li> <li>Press <code>CTRL + X</code> to exit Nano.</li> <li>Nano is user-friendly and displays shortcuts at the bottom of the editor, making it accessible for beginners.</li> </ol> </li> </ol>"},{"location":"book/phase1/linux_basics/04_text_editors.html#test-questions","title":"Test Questions","text":"<ol> <li>How do you enter insert mode in Vim?</li> <li>Which shortcut key can be used to save a file in Nano?</li> <li>How do you exit Vim and save changes?</li> </ol>"},{"location":"book/phase1/linux_basics/05_shell_scripting.html","title":"Shell \u811a\u672c\u548c\u81ea\u52a8\u5316","text":"<p>This section will cover the basics of writing shell scripts in Linux, including syntax, variables, and control structures.</p>"},{"location":"book/phase1/linux_basics/05_shell_scripting.html#_1","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>Shell scripting involves writing scripts to automate tasks, consisting of a series of commands.</p>"},{"location":"book/phase1/linux_basics/05_shell_scripting.html#_2","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li><code>#!/bin/bash</code>\uff1aSpecifies the script interpreter.</li> <li>Variables\uff1aUsed to store data.</li> <li><code>VAR=value</code>\uff1aDefine a variable.</li> <li><code>$VAR</code>\uff1aReference a variable.</li> <li>Control Structures\uff1aUsed to control the flow of script execution.</li> <li><code>if</code>\uff1aConditional statements.</li> <li><code>for</code>\uff1aLoops.</li> </ul>"},{"location":"book/phase1/linux_basics/05_shell_scripting.html#_3","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":""},{"location":"book/phase1/linux_basics/05_shell_scripting.html#_4","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":"<ol> <li>\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c <code>hello.sh</code>\uff1a</li> <li> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u6253\u5f00\u7ec8\u7aef\u3002</li> <li>\u4f7f\u7528\u6587\u672c\u7f16\u8f91\u5668\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>hello.sh</code> \u7684\u6587\u4ef6\uff1a     <pre><code>nano hello.sh\n</code></pre></li> <li>\u5728\u6587\u4ef6\u4e2d\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a     <pre><code>#!/bin/bash\necho \"Hello, World!\"\n</code></pre></li> <li>\u4fdd\u5b58\u6587\u4ef6\u5e76\u9000\u51fa\u7f16\u8f91\u5668\uff08\u5728 Nano \u4e2d\u6309 <code>CTRL + O</code> \u4fdd\u5b58\uff0c\u7136\u540e\u6309 <code>CTRL + X</code> \u9000\u51fa\uff09\u3002</li> <li>\u4f7f\u811a\u672c\u53ef\u6267\u884c\uff1a     <pre><code>chmod +x hello.sh\n</code></pre></li> <li>\u8fd0\u884c\u811a\u672c\uff1a     <pre><code>./hello.sh\n</code></pre></li> <li>\u8fd9\u5c06\u8f93\u51fa \u201cHello, World!\u201d \u5230\u7ec8\u7aef\u3002</li> </ol> </li> <li> <p>\u4f7f\u7528\u53d8\u91cf\u548c\u6761\u4ef6\u8bed\u53e5\uff1a</p> </li> <li> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>greet.sh</code> \u7684\u811a\u672c\uff1a     <pre><code>nano greet.sh\n</code></pre></li> <li>\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a     <pre><code>#!/bin/bash\nNAME=\"Alice\"\nif [ \"$NAME\" == \"Alice\" ]; then\n  echo \"Hello, Alice!\"\nelse\n  echo \"Hello, Stranger!\"\nfi\n</code></pre></li> <li>\u4fdd\u5b58\u5e76\u9000\u51fa\u3002</li> <li>\u8d4b\u4e88\u6267\u884c\u6743\u9650\uff1a     <pre><code>chmod +x greet.sh\n</code></pre></li> <li>\u8fd0\u884c\u811a\u672c\uff1a     <pre><code>./greet.sh\n</code></pre></li> <li>\u5982\u679c\u53d8\u91cf <code>NAME</code> \u7684\u503c\u662f \u201cAlice\u201d\uff0c\u5219\u8f93\u51fa \u201cHello, Alice\uff01\u201d\u3002</li> </ol> </li> <li> <p>\u4f7f\u7528\u5faa\u73af\uff1a</p> </li> <li>\u6b65\u9aa4\uff1a<ol> <li>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>count.sh</code> \u7684\u811a\u672c\uff1a     <pre><code>nano count.sh\n</code></pre></li> <li>\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a     <pre><code>#!/bin/bash\nfor i in {1..5}\ndo\n  echo \"Number: $i\"\ndone\n</code></pre></li> <li>\u4fdd\u5b58\u5e76\u9000\u51fa\u3002</li> <li>\u8d4b\u4e88\u6267\u884c\u6743\u9650\uff1a     <pre><code>chmod +x count.sh\n</code></pre></li> <li>\u8fd0\u884c\u811a\u672c\uff1a     <pre><code>./count.sh\n</code></pre></li> <li>\u8fd9\u5c06\u8f93\u51fa\u6570\u5b57 1 \u5230 5\u3002</li> </ol> </li> </ol>"},{"location":"book/phase1/linux_basics/05_shell_scripting.html#_5","title":"\u6d4b\u8bd5\u9898\u76ee","text":"<ol> <li>\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u5e76\u8f93\u51fa\u5176\u503c\uff1f</li> <li>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>variable_test.sh</code> \u7684\u811a\u672c\uff0c\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf <code>GREETING</code> \u5e76\u5c06\u5176\u503c\u8bbe\u4e3a \"Hello, Linux!\"\uff0c\u7136\u540e\u8f93\u51fa\u8be5\u53d8\u91cf\u3002</li> <li> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u4f7f\u7528\u6587\u672c\u7f16\u8f91\u5668\u6253\u5f00\u6216\u521b\u5efa <code>variable_test.sh</code>\u3002</li> <li>\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a     <pre><code>#!/bin/bash\nGREETING=\"Hello, Linux!\"\necho $GREETING\n</code></pre></li> <li>\u4fdd\u5b58\u5e76\u9000\u51fa\u7f16\u8f91\u5668\u3002</li> <li>\u8d4b\u4e88\u6267\u884c\u6743\u9650\u5e76\u8fd0\u884c\u811a\u672c\u3002</li> </ol> </li> <li> <p>\u5982\u4f55\u7f16\u5199\u4e00\u4e2a\u6761\u4ef6\u8bed\u53e5\u6765\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff1f</p> </li> <li>\u7f16\u5199\u4e00\u4e2a\u811a\u672c <code>check_file.sh</code>\uff0c\u68c0\u67e5\u6587\u4ef6 <code>example.txt</code> \u662f\u5426\u5b58\u5728\uff0c\u5e76\u8f93\u51fa\u76f8\u5e94\u7684\u6d88\u606f\u3002</li> <li> <p>\u6b65\u9aa4\uff1a</p> <ol> <li>\u521b\u5efa\u5e76\u7f16\u8f91 <code>check_file.sh</code>\u3002</li> <li>\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a     <pre><code>#!/bin/bash\nif [ -f \"example.txt\" ]; then\n  echo \"File exists.\"\nelse\n  echo \"File does not exist.\"\nfi\n</code></pre></li> <li>\u4fdd\u5b58\u5e76\u9000\u51fa\u3002</li> <li>\u8d4b\u4e88\u6267\u884c\u6743\u9650\u5e76\u8fd0\u884c\u811a\u672c\u3002</li> </ol> </li> <li> <p>\u5982\u4f55\u4f7f\u7528\u5faa\u73af\u6253\u5370 1 \u5230 10\uff1f</p> </li> <li>\u521b\u5efa\u4e00\u4e2a\u811a\u672c <code>print_numbers.sh</code>\uff0c\u4f7f\u7528 <code>for</code> \u5faa\u73af\u6253\u5370\u6570\u5b57 1 \u5230 10\u3002</li> <li>\u6b65\u9aa4\uff1a<ol> <li>\u521b\u5efa\u5e76\u7f16\u8f91 <code>print_numbers.sh</code>\u3002</li> <li>\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a     <pre><code>#!/bin/bash\nfor i in {1..10}\ndo\n  echo $i\ndone\n</code></pre></li> <li>\u4fdd\u5b58\u5e76\u9000\u51fa\u3002</li> <li>\u8d4b\u4e88\u6267\u884c\u6743\u9650\u5e76\u8fd0\u884c\u811a\u672c\u3002</li> </ol> </li> </ol>"},{"location":"book/phase1/linux_basics/06_git_version_control.html","title":"Git Version Control System","text":"<p>This section will introduce Git, a distributed version control system, and cover basic commands for managing repositories.</p>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#concept-explanation","title":"Concept Explanation","text":"<p>Git is a distributed version control system used to track changes in files and collaborate on development.</p>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#parameter-explanation","title":"Parameter Explanation","text":"<ul> <li>\ud83c\udfd7\ufe0f <code>git init</code>: Initializes a new Git repository.</li> <li>\ud83d\udce5 <code>git clone</code>: Clones a remote repository.</li> <li>\u2795 <code>git add</code>: Adds files to the staging area.</li> <li>\ud83d\udcbe <code>git commit</code>: Commits changes.</li> <li>\ud83d\udcdd <code>-m</code>: Adds a commit message.</li> <li>\ud83d\ude80 <code>git push</code>: Pushes local commits to a remote repository.</li> </ul>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#practical-examples","title":"Practical Examples","text":"<ol> <li>\ud83c\udfaf Use <code>git init</code> to initialize a new repository.</li> <li>\ud83d\udce6 Use <code>git clone &lt;repo&gt;</code> to clone a remote repository.</li> <li>\u2728 Use <code>git add .</code> to add all changes to the staging area.</li> <li>\ud83d\udcab Use <code>git commit -m \"Initial commit\"</code> to commit changes.</li> <li>\ud83d\udd3c Use <code>git push origin main</code> to push to a remote repository.</li> <li>Delete Branches    \ud83d\ude80 Recommended Practices    1\ufe0f\u20e3 To delete only the remote branch: <code>git push origin --delete branch-name</code>    2\ufe0f\u20e3 To update local remote branch list: <code>git fetch --prune</code>    3\ufe0f\u20e3 To delete a GitHub remote branch: Delete directly from GitHub's \"Branches\" page    4\ufe0f\u20e3 If deleting <code>main</code>: Ensure a new <code>main</code> is created before executing the deletion</li> </ol>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#test-questions","title":"Test Questions","text":"<ol> <li>How do you initialize a new Git repository?</li> <li>Which command is used to clone a remote repository?</li> <li>How do you commit changes and add a commit message?</li> </ol>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#git","title":"Git \u7248\u672c\u63a7\u5236\u7cfb\u7edf","text":""},{"location":"book/phase1/linux_basics/06_git_version_control.html#_1","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>Git \u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u7528\u4e8e\u8ddf\u8e2a\u6587\u4ef6\u7684\u66f4\u6539\u548c\u534f\u4f5c\u5f00\u53d1\u3002</p>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#_2","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li>\ud83c\udfd7\ufe0f <code>git init</code>\uff1a\u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u7684 Git \u4ed3\u5e93\u3002</li> <li>\ud83d\udce5 <code>git clone</code>\uff1a\u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93\u3002</li> <li>\u2795 <code>git add</code>\uff1a\u6dfb\u52a0\u6587\u4ef6\u5230\u6682\u5b58\u533a\u3002</li> <li>\ud83d\udcbe <code>git commit</code>\uff1a\u63d0\u4ea4\u66f4\u6539\u3002</li> <li>\ud83d\udcdd <code>-m</code>\uff1a\u6dfb\u52a0\u63d0\u4ea4\u4fe1\u606f\u3002</li> <li>\ud83d\ude80 <code>git push</code>\uff1a\u63a8\u9001\u672c\u5730\u63d0\u4ea4\u5230\u8fdc\u7a0b\u4ed3\u5e93\u3002</li> <li><code>git merge --squash</code>\uff1a\u5c06\u6307\u5b9a\u5206\u652f\u7684\u66f4\u6539\u5408\u5e76\u5230\u5f53\u524d\u5206\u652f\uff0c\u4f46\u4e0d\u81ea\u52a8\u521b\u5efa\u5408\u5e76\u63d0\u4ea4\u3002\u5408\u5e76\u7684\u66f4\u6539\u4f1a\u88ab\u6682\u5b58\uff0c\u7528\u6237\u9700\u8981\u624b\u52a8\u521b\u5efa\u63d0\u4ea4\u3002</li> <li><code>git cherry-pick</code>\uff1a\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u63d0\u53d6\u6307\u5b9a\u7684\u63d0\u4ea4\u5e76\u5e94\u7528\u5230\u672c\u5730\u3002</li> <li><code>git rebase</code>\uff1a<code>git rebase</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5c06\u4e00\u4e2a\u5206\u652f\u7684\u66f4\u6539\u5e94\u7528\u5230\u53e6\u4e00\u4e2a\u5206\u652f\u4e4b\u4e0a\u7684\u547d\u4ee4\u3002\u5b83\u5e38\u7528\u4e8e\u7ebf\u6027\u5316\u63d0\u4ea4\u5386\u53f2\uff0c\u4fdd\u6301\u5386\u53f2\u7684\u7b80\u6d01\u6027\u548c\u53ef\u8bfb\u6027\u3002\u5728\u4f7f\u7528 <code>git rebase</code> \u65f6\uff0cGit \u4f1a\u628a\u5f53\u524d\u5206\u652f\u4ece\u5176\u57fa\u7840\u5206\u652f\u201c\u79fb\u51fa\u201d\uff0c\u5e76\u5c06\u5176\u5e94\u7528\u5230\u65b0\u7684\u57fa\u7840\u4e4b\u4e0a\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0crebase \u4f1a\u6539\u53d8\u63d0\u4ea4\u5386\u53f2\uff0c\u56e0\u6b64\u5728\u5171\u4eab\u5206\u652f\u4e0a\u4f7f\u7528\u65f6\u8981\u8c28\u614e\u3002</li> </ul>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#git-untracked-committed","title":"Git \u6587\u4ef6\u72b6\u6001\u8be6\u89e3\uff1a\u4ece Untracked \u5230 Committed","text":"<p>\u5728\u4f7f\u7528 Git \u8fdb\u884c\u7248\u672c\u63a7\u5236\u65f6\uff0c\u6587\u4ef6\u4f1a\u7ecf\u5386\u4e0d\u540c\u7684\u72b6\u6001\u3002\u7406\u89e3\u8fd9\u4e9b\u72b6\u6001\u6709\u52a9\u4e8e\u9ad8\u6548\u7ba1\u7406\u4ee3\u7801\uff0c\u5e76\u907f\u514d\u4e22\u5931\u91cd\u8981\u66f4\u6539\u3002\u672c\u6587\u5c06\u8be6\u7ec6\u4ecb\u7ecd Git \u7684\u51e0\u79cd\u6587\u4ef6\u72b6\u6001\uff0c\u5e76\u603b\u7ed3\u5982\u4f55\u5728\u547d\u4ee4\u884c\u548c VSCode \u4e2d\u67e5\u770b\u548c\u64cd\u4f5c\u5b83\u4eec\u3002</p> <p>Git \u6587\u4ef6\u7684\u51e0\u79cd\u72b6\u6001 \u5728 Git \u4e2d\uff0c\u6587\u4ef6\u7684\u72b6\u6001\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a | \u6587\u4ef6\u72b6\u6001 | \u8bf4\u660e | \u7ec8\u7aef\u67e5\u770b\u65b9\u5f0f | VSCode \u67e5\u770b\u65b9\u5f0f | | --- | --- | --- | --- | | Untracked\uff08\u672a\u8ddf\u8e2a\uff09 | Git \u672a\u8ddf\u8e2a\u7684\u65b0\u6587\u4ef6\uff0c\u672a\u6dfb\u52a0\u5230\u6682\u5b58\u533a | git status | Source Control \u9762\u677f\uff0c\u6807\u8bb0\u4e3a U\uff08Untracked\uff09 | | Modified\uff08\u5df2\u4fee\u6539\uff09 | \u5df2\u8ddf\u8e2a\u7684\u6587\u4ef6\u88ab\u4fee\u6539\uff0c\u4f46\u672a\u6dfb\u52a0\u5230\u6682\u5b58\u533a | git status / git diff | Source Control \u9762\u677f\uff0c\u6807\u8bb0\u4e3a M\uff08Modified\uff09 | | Staged\uff08\u5df2\u6682\u5b58\uff09 | \u4fee\u6539\u540e\u7684\u6587\u4ef6\u5df2\u6dfb\u52a0\u5230\u6682\u5b58\u533a\uff0c\u7b49\u5f85\u63d0\u4ea4 | git status / git diff --cached | Source Control \u9762\u677f\uff0c\u51fa\u73b0\u5728 Staged Changes \u6807\u8bb0\u4e3a A (Added) | | Committed\uff08\u5df2\u63d0\u4ea4\uff09 | \u6587\u4ef6\u66f4\u6539\u5df2\u63d0\u4ea4\u5230\u672c\u5730 Git \u4ed3\u5e93 | git log / git show  | Git History \u6269\u5c55 \u6216 GitLens | | Deleted\uff08\u5df2\u5220\u9664\uff09 | \u6587\u4ef6\u88ab\u5220\u9664\u4f46 Git \u4ecd\u7136\u8ddf\u8e2a\u5b83 | git status / git diff --cached | Source Control \u9762\u677f\uff0c\u6807\u8bb0\u4e3a D\uff08Deleted\uff09 | | Renamed\uff08\u5df2\u91cd\u547d\u540d\uff09 | Git \u8bc6\u522b\u5230\u6587\u4ef6\u88ab\u91cd\u547d\u540d | git status | Source Control \u9762\u677f\uff0c\u6807\u8bb0\u4e3a R\uff08Renamed\uff09 | | Ignored\uff08\u5df2\u5ffd\u7565\uff09 | .gitignore \u4e2d\u6392\u9664\u7684\u6587\u4ef6\uff0c\u4e0d\u88ab Git \u8ffd\u8e2a | git status --ignored / git check-ignore -v  | \u9ed8\u8ba4\u4e0d\u5728 Source Control \u4e2d\u663e\u793a | <p>Untracked vs Modified\uff1a\u4e24\u8005\u7684\u533a\u522b Untracked\uff08\u672a\u8ddf\u8e2a\uff09 \u548c Modified\uff08\u5df2\u4fee\u6539\uff09 \u662f Git \u521d\u5b66\u8005\u7ecf\u5e38\u6df7\u6dc6\u7684\u4e24\u4e2a\u72b6\u6001\u3002</p> \u72b6\u6001 \u662f\u5426\u88ab Git \u8ffd\u8e2a\uff1f \u662f\u5426\u5df2 git add\uff1f \u662f\u5426\u5df2 git commit\uff1f Untracked\uff08\u672a\u8ddf\u8e2a\uff09 \u274c \u5426 \u274c \u5426 \u274c \u5426 Modified\uff08\u5df2\u4fee\u6539\uff09 \u2705 \u662f \u274c \u5426 \u274c \u5426 <p>\u4e3e\u4f8b\u8bf4\u660e</p> <ul> <li>Untracked \u6587\u4ef6\u793a\u4f8b</li> </ul> <p><pre><code>echo \"Hello\" &gt; new_file.txt\ngit status\n</code></pre> \u8f93\u51fa</p> <p><pre><code>Untracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    new_file.txt\n</code></pre> \u6b64\u65f6 <code>new_file.txt</code> \u8fd8\u6ca1\u6709\u88ab Git \u8ffd\u8e2a\u3002**</p> <ul> <li>Modified \u6587\u4ef6\u793a\u4f8b</li> </ul> <p><pre><code>git add new_file.txt\ngit commit -m \"Add new_file.txt\"\necho \"New content\" &gt;&gt; new_file.txt\ngit status\n</code></pre> \u8f93\u51fa</p> <p><pre><code>Changes not staged for commit:\n  modified:   new_file.txt\n</code></pre> \u6b64\u65f6 <code>new_file.txt</code> \u5df2\u88ab Git \u8ffd\u8e2a\uff0c\u4f46\u5185\u5bb9\u88ab\u4fee\u6539\u4e86\u3002**</p> <p>\u5982\u4f55\u8f6c\u6362\u6587\u4ef6\u72b6\u6001\uff1f</p> \u76ee\u6807\u72b6\u6001 Git \u64cd\u4f5c\u547d\u4ee4 VSCode \u64cd\u4f5c\u65b9\u5f0f Untracked \u2192 Staged git add  \u9009\u4e2d\u6587\u4ef6\uff0c\u70b9\u51fb + Modified \u2192 Staged git add  \u9009\u4e2d\u6587\u4ef6\uff0c\u70b9\u51fb + Staged \u2192 Committed git commit -m \"message\" \u8f93\u5165\u63d0\u4ea4\u4fe1\u606f\u540e\u70b9\u51fb \u2713 Modified \u2192 Unmodified\uff08\u64a4\u9500\u4fee\u6539\uff09 git restore  \u53f3\u952e\u6587\u4ef6\uff0c\u9009\u62e9 Discard Changes Staged \u2192 Modified\uff08\u53d6\u6d88\u6682\u5b58\uff09 git reset HEAD  \u53f3\u952e\u6587\u4ef6\uff0c\u9009\u62e9 Unstage Deleted \u2192 \u8fd8\u539f\u5220\u9664 git checkout --  \u6216 git restore  \u53f3\u952e\u6587\u4ef6\uff0c\u9009\u62e9 Restore Ignored \u2192 \u8ffd\u8e2a\u6587\u4ef6 \u7f16\u8f91 .gitignore \u6587\u4ef6\uff0c\u5220\u9664\u5bf9\u5e94\u89c4\u5219 \u5728 .gitignore \u4e2d\u79fb\u9664\u5bf9\u5e94\u6587\u4ef6\u89c4\u5219 <p>VSCode \u4e2d\u5982\u4f55\u67e5\u770b Git \u6587\u4ef6\u72b6\u6001\uff1f</p> <ol> <li>\u6253\u5f00 Source Control\uff08\u6e90\u4ee3\u7801\u7ba1\u7406\uff09\u9762\u677f</li> <li> <p>\u5feb\u6377\u952e <code>Ctrl+Shift+G</code>\uff08Windows / Linux\uff09\u6216 <code>Cmd+Shift+G</code>\uff08Mac\uff09\u3002</p> </li> <li> <p>\u672a\u8ddf\u8e2a\u3001\u5df2\u4fee\u6539\u3001\u5df2\u6682\u5b58\u7684\u6587\u4ef6\u4f1a\u5728\u9762\u677f\u4e2d\u663e\u793a\u3002</p> </li> <li> <p>\u67e5\u770b\u6587\u4ef6\u72b6\u6001</p> </li> <li> <p>U\uff08Untracked\uff09 \uff1a\u65b0\u6587\u4ef6\uff0c\u672a\u6dfb\u52a0\u5230 Git\u3002</p> </li> <li> <p>M\uff08Modified\uff09 \uff1a\u5df2\u4fee\u6539\u4f46\u672a\u6682\u5b58\u3002</p> </li> <li> <p>A\uff08Added\uff09 \uff1a\u5df2\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u3002</p> </li> <li> <p>D\uff08Deleted\uff09 \uff1a\u6587\u4ef6\u88ab\u5220\u9664\u3002</p> </li> <li> <p>R\uff08Renamed\uff09 \uff1a\u6587\u4ef6\u88ab\u91cd\u547d\u540d\u3002</p> </li> <li> <p>\u70b9\u51fb\u6587\u4ef6\u67e5\u770b\u66f4\u6539</p> </li> <li> <p>\u76f4\u63a5\u70b9\u51fb\u6587\u4ef6\u53ef\u4ee5\u770b\u5230 \u4fee\u6539\u524d\u540e\u5bf9\u6bd4\uff08diff\uff09 \u3002</p> </li> <li> <p>\u63d0\u4ea4\u66f4\u6539</p> </li> <li> <p>\u9009\u4e2d\u5df2\u6682\u5b58\u7684\u6587\u4ef6\uff0c\u8f93\u5165\u63d0\u4ea4\u4fe1\u606f\u540e\u70b9\u51fb \u2713\uff08\u63d0\u4ea4\uff09 \u3002</p> </li> <li> <p>\u67e5\u770b Git \u5386\u53f2</p> </li> <li>\u4f7f\u7528 GitLens \u6216 Git Graph \u6269\u5c55\u63d2\u4ef6\uff0c\u65b9\u4fbf\u53ef\u89c6\u5316\u5386\u53f2\u63d0\u4ea4\u548c\u53d8\u66f4\u3002</li> </ol> <p>\u603b\u7ed3 - Untracked \u6587\u4ef6\u662f\u65b0\u7684\uff0cGit \u4e0d\u8ddf\u8e2a\uff0c\u5fc5\u987b <code>git add</code> \u540e\u624d\u80fd\u7ba1\u7406\u3002</p> <ul> <li> <p>Modified \u6587\u4ef6\u662f\u5df2\u7ecf\u88ab Git \u8ddf\u8e2a\u7684\uff0c\u4f46\u6709\u65b0\u7684\u4fee\u6539\u672a <code>git add</code>\u3002</p> </li> <li> <p>Staged \u6587\u4ef6\u5df2\u7ecf <code>git add</code>\uff0c\u7b49\u5f85 <code>git commit</code>\u3002</p> </li> <li> <p>Committed \u6587\u4ef6\u5df2\u7ecf\u63d0\u4ea4\u5230\u672c\u5730\u4ed3\u5e93\uff0c\u53ef\u4ee5\u7528 <code>git log</code> \u67e5\u770b\u5386\u53f2\u3002</p> </li> <li> <p>\u5728 VSCode \u7684 Source Control \u9762\u677f\u4e2d\uff0c\u53ef\u4ee5\u76f4\u89c2\u5730\u67e5\u770b\u548c\u7ba1\u7406 Git \u6587\u4ef6\u72b6\u6001\u3002</p> </li> </ul>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#git-flow-best-practice","title":"Git flow best practice","text":"<p>Git Flow \u662f\u4e00\u4e2a\u57fa\u4e8e\u5206\u652f\u7684\u8f6f\u4ef6\u5f00\u53d1\u5de5\u4f5c\u6d41\u7a0b\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u7ec4\u4e25\u683c\u7684\u5206\u652f\u64cd\u4f5c\u89c4\u5219\u3002\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u5206\u652f\uff1a</p> <ol> <li>Main/Master \u5206\u652f</li> <li>\u5b58\u50a8\u5b98\u65b9\u53d1\u5e03\u5386\u53f2</li> <li>\u53ea\u5305\u542b\u7a33\u5b9a\u7684\u3001\u5df2\u53d1\u5e03\u7684\u4ee3\u7801</li> <li> <p>\u6bcf\u4e2a\u63d0\u4ea4\u90fd\u5e94\u8be5\u6709\u4e00\u4e2a\u7248\u672c\u6807\u7b7e\uff08tag\uff09</p> </li> <li> <p>Develop \u5206\u652f</p> </li> <li>\u4e3b\u8981\u7684\u5f00\u53d1\u5206\u652f</li> <li>\u5305\u542b\u6700\u65b0\u7684\u5f00\u53d1\u7279\u6027</li> <li>\u6240\u6709\u7279\u6027\u5206\u652f\u90fd\u4ece\u8fd9\u91cc\u5206\u51fa</li> <li> <p>\u5f53\u5f00\u53d1\u5b8c\u6210\u65f6\uff0c\u5408\u5e76\u56de main \u5206\u652f</p> </li> <li> <p>Feature \u5206\u652f</p> </li> <li>\u7528\u4e8e\u5f00\u53d1\u65b0\u529f\u80fd</li> <li>\u4ece develop \u5206\u652f\u521b\u5efa</li> <li>\u547d\u540d\u89c4\u8303\uff1afeature/\u529f\u80fd\u540d</li> <li> <p>\u5b8c\u6210\u540e\u5408\u5e76\u56de develop \u5206\u652f</p> </li> <li> <p>Release \u5206\u652f</p> </li> <li>\u51c6\u5907\u53d1\u5e03\u65b0\u7248\u672c\u65f6\u521b\u5efa</li> <li>\u4ece develop \u5206\u652f\u521b\u5efa</li> <li>\u547d\u540d\u89c4\u8303\uff1arelease/\u7248\u672c\u53f7</li> <li>\u53ea\u4fee\u590d bug\uff0c\u4e0d\u6dfb\u52a0\u65b0\u529f\u80fd</li> <li> <p>\u5b8c\u6210\u540e\u540c\u65f6\u5408\u5e76\u5230 main \u548c develop</p> </li> <li> <p>Hotfix \u5206\u652f</p> </li> <li>\u7528\u4e8e\u4fee\u590d\u751f\u4ea7\u73af\u5883\u7684\u7d27\u6025\u95ee\u9898</li> <li>\u4ece main \u5206\u652f\u521b\u5efa</li> <li>\u547d\u540d\u89c4\u8303\uff1ahotfix/\u95ee\u9898\u63cf\u8ff0</li> <li>\u5b8c\u6210\u540e\u540c\u65f6\u5408\u5e76\u5230 main \u548c develop</li> </ol> <p>\u5de5\u4f5c\u6d41\u7a0b\uff1a</p> <ol> <li>\u5f00\u53d1\u65b0\u529f\u80fd\uff1a</li> </ol> <pre><code>git checkout develop\ngit checkout -b feature/new-feature\n# \u5f00\u53d1\u5b8c\u6210\u540e\ngit checkout develop\ngit merge feature/new-feature\n</code></pre> <ol> <li>\u51c6\u5907\u53d1\u5e03\uff1a</li> </ol> <pre><code>git checkout develop\ngit checkout -b release/1.0.0\n# \u4fee\u590d bug \u540e\ngit checkout main\ngit merge release/1.0.0\ngit checkout develop\ngit merge release/1.0.0\ngit tag -a v1.0.0\n</code></pre> <ol> <li>\u7d27\u6025\u4fee\u590d\uff1a</li> </ol> <pre><code>git checkout main\ngit checkout -b hotfix/critical-bug\n# \u4fee\u590d\u540e\ngit checkout main\ngit merge hotfix/critical-bug\ngit checkout develop\ngit merge hotfix/critical-bug\ngit tag -a v1.0.1\n</code></pre> <p>\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li>\u4fdd\u6301 main \u5206\u652f\u7a33\u5b9a\uff0c\u53ea\u5408\u5e76\u5df2\u6d4b\u8bd5\u7684\u4ee3\u7801</li> <li>develop \u5206\u652f\u5e94\u8be5\u59cb\u7ec8\u5305\u542b\u6700\u65b0\u7684\u5f00\u53d1\u4ee3\u7801</li> <li>feature \u5206\u652f\u5e94\u8be5\u5b9a\u671f\u4e0e develop \u540c\u6b65</li> <li>release \u548c hotfix \u5206\u652f\u9700\u8981\u540c\u65f6\u5408\u5e76\u5230 main \u548c develop</li> <li>\u6bcf\u6b21\u53d1\u5e03\u90fd\u8981\u6253\u4e0a\u7248\u672c\u6807\u7b7e</li> </ul>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#_3","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":""},{"location":"book/phase1/linux_basics/06_git_version_control.html#1-workflow-simulation","title":"1. workflow simulation","text":"<ol> <li>\u5728 <code>main</code> \u521b\u5efa\u4e00\u4e2a\u5206\u652f <code>zhangwei/feature/test</code>\uff1a</li> </ol> <pre><code>git checkout main\ngit checkout -b zhangwei/feature/test\n</code></pre> <ol> <li>\u5728 <code>zhangwei/feature/test</code> \u4e0a\u8fdb\u884c\u51e0\u4e2a\u5b9e\u9a8c\u6027\u7684 commit\uff1a</li> </ol> <pre><code># \u4fee\u6539\u6587\u4ef6\u5e76\u63d0\u4ea4\nmkdir experiment\necho \"Experiment 1\" &gt;&gt; experiment/experiment.txt\ngit add experiment/experiment.txt\ngit commit -m \"Add experiment 1\"\n\necho \"Experiment 2\" &gt;&gt; experiment/experiment.txt\ngit add experiment/experiment.txt\ngit commit -m \"Add experiment 2\"\n</code></pre> <ol> <li>\u5728 <code>main</code> \u521b\u5efa\u4e00\u4e2a\u6b63\u5f0f\u5206\u652f <code>zhangwei/feature/a</code>\uff1a</li> </ol> <pre><code>git checkout main\ngit checkout -b zhangwei/feature/a\n</code></pre> <ol> <li>\u628a <code>zhangwei/feature/test</code> \u4e0a\u7684\u5de5\u4f5c\u590d\u5236\u5230 <code>zhangwei/feature/a</code> \u4e0a\uff1a</li> </ol> <p><pre><code>git checkout zhangwei/feature/a\ngit merge --squash zhangwei/feature/test\ngit commit -m \"Integrate experimental features\"\ngit push\n</code></pre>    squash  \u53ef\u4ee5\u628a\u591a\u4e2a commit \u5408\u5e76\u5230\u4e00\u4e2a commit \u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u63d0\u4ea4\u6b21\u6570\uff0c\u51cf\u5c11\u51b2\u7a81\uff0c\u4f46\u662f\u4f1a\u4e22\u5931\u4fe1\u606f\u3002\u5728\u4fdd\u6301\u6b63\u5f0f\u63d0\u4ea4\u65f6\u7684\u60c5\u51b5\u4e0b\uff0csquash \u662f\u4e00\u4e2a\u597d\u7684\u9009\u62e9\u3002</p> <ol> <li>\u8fdb\u884c merge request\uff1a</li> <li>\u63d0\u4ea4 <code>zhangwei/feature/a</code> \u5230\u8fdc\u7a0b\u4ed3\u5e93\u5e76\u521b\u5efa merge request\u3002</li> </ol> <pre><code>git push origin zhangwei/feature/a\n</code></pre> <ol> <li>\u8fdb\u884c merge review \u5e76\u5408\u5e76 merge request\uff1a</li> <li>\u5728\u4ee3\u7801\u8bc4\u5ba1\u901a\u8fc7\u540e\uff0c\u5408\u5e76 <code>zhangwei/feature/a</code> \u5230 <code>main</code>\u3002</li> </ol> <p></p> <pre><code>git checkout main\ngit pull  # \u518d\u6b21\u786e\u4fdd main \u662f\u6700\u65b0\u7684\n</code></pre>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#2use-git-stash-to-work-cross-branches","title":"2.use git stash to work cross branches","text":"<ol> <li>\u5728 <code>zhangwei/feature/a</code> \u5206\u652f\u4e0a\u5de5\u4f5c\u65f6\uff0c\u7a81\u7136\u9700\u8981\u5207\u6362\u5230 <code>xiaohong/feature/b</code> \u4fee\u590dbug\uff1a</li> </ol> <pre><code>git checkout xiaohong/feature/a\n# \u5728 zhangwei/feature/a \u4e0a\u8fdb\u884c\u5de5\u4f5c\necho \"Feature A work in progress\" &gt;&gt; experiment/feature_a.txt\ngit add experiment/feature_a.txt\n\n# \u9700\u8981\u5207\u6362\u5206\u652f\uff0c\u4f46\u5de5\u4f5c\u8fd8\u672a\u5b8c\u6210\uff0c\u4f7f\u7528 stash \u4fdd\u5b58\ngit stash save \"feature A work in progress\"\n\n# \u5207\u6362\u5230 xiaohong/feature/b \u5206\u652f\ngit checkout xiaohong/feature/b\n\n# \u5728 xiaohong/feature/b \u4e0a\u4fee\u590d bug\necho \"Bug fix in feature B\" &gt;&gt; experiment/feature_b.txt\ngit add experiment/feature_b.txt\ngit commit -m \"Fix bug in feature B\"\n</code></pre> <ol> <li>\u73b0\u5728\u9700\u8981\u7acb\u5373\u63d0\u4ea4 <code>xiaohong/feature/a</code> \u4e0a\u7684\u5de5\u4f5c\uff0c \u5e76\u5b8c\u6210\u624b\u5934 feature/b \u7684\u5de5\u4f5c</li> </ol> <pre><code># xiaohong/feature/b \u4e0a\u7684\u65b0\u5de5\u4f5c\necho \"New task in feature B\" &gt;&gt; experiment/feature_b.txt\ngit add experiment/feature_b.txt\n\n# \u4fdd\u5b58 xiaohong/feature/b \u7684\u5de5\u4f5c\ngit stash save \"feature B new task\"\n\n# \u5207\u56de xiaohong/feature/a \u5e76\u6062\u590d\u4e4b\u524d\u7684\u5de5\u4f5c\ngit checkout xiaohong/feature/a\ngit stash list  # \u67e5\u770b\u6240\u6709 stash\ngit stash pop stash@{1}  # \u6062\u590d\u6700\u8fd1\u7684 stash\uff08feature A \u7684\u5de5\u4f5c\uff09\ngit status\n&gt;&gt; ...\n&gt;&gt;    modified: experiment/feature_a.txt\n&gt;&gt; ...\n\n# \u5b8c\u6210 xiaohong/feature/a \u7684\u5de5\u4f5c\u5e76\u63d0\u4ea4\ngit add experiment/feature_a.txt\ngit commit -m \"Complete feature A work\"\n</code></pre> <ol> <li>\u8fd4\u56de <code>xiaohong/feature/b</code> \u7ee7\u7eed\u5de5\u4f5c\uff1a</li> </ol> <pre><code>git checkout xiaohong/feature/b\ngit stash list\n&gt;&gt;&gt;stash@{0}\" On xiaohong/feature/b: feature B new task\"\ngit stash pop   # \u6062\u590d feature B \u7684\u5de5\u4f5c\n# changes \u91cc\u9762\u4f1a\u51fa\u73b0 experiment/feature_b.txt\n\n# \u5b8c\u6210 xiaohong/feature/b \u7684\u5de5\u4f5c\u5e76\u63d0\u4ea4\ngit add experiment/feature_b.txt\ngit commit -m \"Complete new task in feature B\"\n</code></pre>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#3-merge","title":"3. merge \u5de5\u4f5c\u6d41\u7a0b","text":"<p>\u5f20\u4f1f\u548c\u5c0f\u7ea2\u5728\u540c\u4e00\u4e2a\u9879\u76ee\u4e0a\u5de5\u4f5c\uff0c\u4ed6\u4eec\u9700\u8981\u5206\u522b\u5f00\u53d1\u4e0d\u540c\u7684\u529f\u80fd\u3002 \u5206\u522b\u6a21\u62dfzhangwei \u548c xiaohong \u7684\u5de5\u4f5c\u6d41\u7a0b\u3002\u4ed6\u4eec\u5206\u522b\u521b\u5efa\u4e0d\u540c\u7684\u5206\u652f.</p> <p>\u6700\u5f00\u59cb\u7684\u72b6\u6001\u5982\u4e0b\uff1a</p> <pre><code># \u5c0f\u7ea2\uff1a\u4ece\u6700\u65b0\u7684 main \u5206\u652f\u521b\u5efa\u529f\u80fd\u5206\u652f\ngit checkout main\ngit pull  # \u786e\u4fdd main \u662f\u6700\u65b0\u7684\uff0c \u4e00\u822c\u5207\u6362\u65b0\u5206\u652f\u4e4b\u524d\uff0c\u5148pull\u4ee5\u514d\u843d\u540e\uff0c\u5bfc\u81f4conflict\ngit checkout -b xiaohong/feature/register\n</code></pre> <pre><code># \u5f20\u4f1f\uff1a\u4ece\u6700\u65b0\u7684 main \u5206\u652f\u521b\u5efa\u529f\u80fd\u5206\u652f\ngit checkout main\ngit pull  # \u786e\u4fdd main \u662f\u6700\u65b0\u7684\ngit checkout -b zhangwei/feature/login\n</code></pre> <ol> <li>\u5f20\u4f1f\u5f00\u59cb\u5f00\u53d1\u7528\u6237\u767b\u5f55\u529f\u80fd\uff1a</li> </ol> <pre><code># \u5f20\u4f1f\uff1a\u4ece\u6700\u65b0\u7684 main \u5206\u652f\u521b\u5efa\u529f\u80fd\u5206\u652f\ngit checkout main\ngit pull  # \u786e\u4fdd main \u662f\u6700\u65b0\u7684\ngit checkout -b zhangwei/feature/login\n\n# \u5f20\u4f1f\uff1a\u5f00\u53d1\u767b\u5f55\u529f\u80fd\necho \"\u767b\u5f55\u9875\u9762\u8bbe\u8ba1\" &gt; experiment/login.txt\ngit add experiment/login.txt\ngit commit -m \"Add login page design\"\n\necho \"\u767b\u5f55\u9a8c\u8bc1\" &gt;&gt; experiment/login.txt\ngit add experiment/login.txt\ngit commit -m \"Add login validation\"\n</code></pre> <p>\u76ee\u524d\u72b6\u6001\u5e94\u8be5\u662f zhangwei/feature/login \u4f1a\u63d0\u524dmain \u4e24\u4e2a\u63d0\u4ea4</p> <p></p> <p>\u5f20\u4f1f\u63d0\u4ea4merge request \u5230 main \u5e76\u5408\u5e76\u3002</p> <pre><code># \u5f20\u4f1f\uff1a\u63d0\u4ea4\u5e76\u5408\u5e76\u529f\u80fd\ngit push origin zhangwei/feature/login\n# \u521b\u5efa merge request\n# \u6b63\u5e38\u662f\u5728github \u9875\u9762\u63d0\u4ea4merge request\uff0c\u8fdb\u884creview \u518d\u5408\u5e76\uff0c\u8bf7\u67e5\u9605\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u3002\u4e0b\u9762\u662f\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u5408\u5e76\uff0c\u6a21\u62df\u8fd9\u4e2a\u5de5\u4f5c\u3002\ngit checkout main\ngit pull  # \u518d\u6b21\u786e\u4fdd main \u662f\u6700\u65b0\u7684\ngit merge zhangwei/feature/login\ngit push origin main\n</code></pre> <p>merge \u4e4b\u540e\uff0cmain \u4fdd\u6301\u548czhangwei/feature/login \u540c\u6b65    </p> <ol> <li>\u540c\u65f6\uff0c\u5c0f\u7ea2\u5728\u5f00\u53d1\u6ce8\u518c\u529f\u80fd\uff1a</li> </ol> <p>\u6211\u4eec\u5047\u8bbe\u5c0f\u7ea2\u548c\u5f20\u4f1f\u90fd\u5728\u5f00\u53d1\u6ce8\u518c\u529f\u80fd\u3002 \u5207\u6362\u5230\u5c0f\u7ea2\u7684\u5206\u652f\u5de5\u4f5c</p> <pre><code>git checkout -b xiaohong/feature/register\n</code></pre> <p>\u5c0f\u7ea2\u72ec\u7acb\u5728\u81ea\u5df1\u7684\u5206\u652f\u5de5\u4f5c\u3002</p> <p><pre><code># \u5c0f\u7ea2\uff1a\u5f00\u53d1\u6ce8\u518c\u529f\u80fd\necho \"\u6ce8\u518c\u9875\u9762\u8bbe\u8ba1\" &gt; experiment/register.txt\ngit add experiment/register.txt\ngit commit -m \"Add register page design\"\n\necho \"\u6ce8\u518c\u9a8c\u8bc1\" &gt;&gt; experiment/register.txt\ngit add experiment/register.txt\ngit commit -m \"Add register validation\"\n\n# \u5c0f\u7ea2\u4e5f\u9700\u8981\u5728login.txt \u4e0a\u505a\u4e00\u4e2a\u4fee\u6539\uff0c\u4f46\u662f\u5979\u8fd8\u4e0d\u77e5\u9053\u5f20\u4f1f\u7684\u4fee\u6539\necho \"\u6ce8\u518c\u540e\u767b\u5f55\u9a8c\u8bc1\" &gt;&gt; experiment/login.txt\ngit add experiment/login.txt\ngit commit -m \"Add login validation after register\"\n</code></pre> \u6b64\u65f6\u7684\u5206\u652f\u72b6\u6001\u4e3a</p> <p></p> <ol> <li>\u5c0f\u7ea2\u63d0\u4ea4\u6ce8\u518c\u529f\u80fd\uff1a</li> </ol> <pre><code># \u5c0f\u7ea2\uff1a\u83b7\u53d6\u6700\u65b0\u7684 main \u5206\u652f\u5e76\u66f4\u65b0\u81ea\u5df1\u7684\u529f\u80fd\u5206\u652f\ngit checkout main\ngit pull\ngit checkout xiaohong/feature/register\ngit merge main  # \u5c06\u6700\u65b0\u7684 main \u5408\u5e76\u5230\u81ea\u5df1\u7684\u529f\u80fd\u5206\u652f\n</code></pre> <p>\u8fd9\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0merge conflict, \u56e0\u4e3a\u5c0f\u7ea2\u548c\u5f20\u4f1f\u90fd\u5728\u4fee\u6539register.txt\uff0c\u6240\u4ee5\u4f1a\u51fa\u73b0conflict\u3002</p> <p>    \u5728source control \u4e2d\uff0c\u70b9\u51fbconflict \u6587\u4ef6, \u67e5\u770b\u51b2\u7a81\u7684\u5185\u5bb9\uff0c\u5728\u7f16\u8f91\u5668\u4e2d\u89e3\u51b3\u6389conflict\u3002</p> <p></p> <p>\u89e3\u51b3\u5b8c\u4e4b\u540e\uff0c\u63d0\u4ea4\u5408\u5e76\u7684commit</p> <pre><code>git commit -m \"Merge branch 'main' into 'xiaohong/feature/register'\"\n</code></pre> <p><pre><code># \u5c0f\u7ea2\uff1a\u63d0\u4ea4\u5e76\u5408\u5e76\u529f\u80fd\ngit push origin xiaohong/feature/register\n# \u521b\u5efa merge request\ngit checkout main\ngit pull\ngit merge xiaohong/feature/register\ngit push origin main\n</code></pre> \u63d0\u4ea4\u5b8cmerge request\u4e4b\u540e\uff0c\u5c0f\u7ea2\u7684\u5206\u652f\u548cmain \u4fdd\u6301\u4e00\u81f4\u3002\u5e76\u4e14\u5305\u542b\u4e86zhangwei \u7684register\u529f\u80fd\u3002</p>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#4-git-cherry-pick","title":"4. git cherry-pick","text":"<p>git cherry-pick \u7528\u4e8e\u4ece\u4e00\u4e2a\u5206\u652f\u4e2d\u6311\u9009\u7279\u5b9a\u7684\u63d0\u4ea4\uff08commit\uff09\u5e76\u5e94\u7528\u5230\u5f53\u524d\u5206\u652f\uff0c\u800c\u4e0d\u5f71\u54cd\u5176\u4ed6\u63d0\u4ea4\u3002\u5b83\u9002\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f\uff1a</p> <p>\u8de8\u5206\u652f\u8fc1\u79fb\u5355\u4e2a\u6216\u591a\u4e2a\u63d0\u4ea4\uff08\u5982\u5c06 feature \u5206\u652f\u7684\u67d0\u4e2a\u63d0\u4ea4\u5e94\u7528\u5230 main\uff09\u3002 \u4fee\u590d Bug\uff08\u6311\u9009\u4fee\u590d Bug \u7684 commit\uff0c\u5408\u5e76\u5230\u751f\u4ea7\u73af\u5883\uff09\u3002 \u907f\u514d\u5408\u5e76\u6574\u4e2a\u5206\u652f\uff08\u53ea\u60f3\u8981\u7279\u5b9a\u7684\u66f4\u6539\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u5206\u652f\u7684\u6240\u6709\u63d0\u4ea4\uff09\u3002</p> <p>\u73b0\u5728\u6a21\u62df\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 git cherry-pick\u3002</p> <p>\u5f20\u4f1f\u5728\u5de5\u4f5c\u662f\u5f00\u53d1\u767b\u5f55\u529f\u80fd\uff0c\u5c0f\u7ea2\u5728\u5f00\u53d1\u6ce8\u518c\u529f\u80fd\u3002\u5f20\u4f1f\u53d1\u73b0\u5c0f\u7ea2\u7684\u5bc6\u7801\u68c0\u67e5\u51fd\u6570\u5f88\u5b9e\u7528\uff0c\u60f3\u8981\u5728\u767b\u5f55\u529f\u80fd\u4e2d\u4f7f\u7528\u3002</p> <p>\u51c6\u5907\u5de5\u4f5c\uff1a\u9996\u5148\u521b\u5efa\u5e76\u8bbe\u7f6e\u4e24\u4e2a\u5206\u652f\u7684\u5185\u5bb9\u3002</p> <p>\u5c0f\u7ea2\u7684\u5206\u652f</p> <pre><code># \u5c0f\u7ea2\u521b\u5efa\u65b0\u5206\u652f\ngit checkout main\ngit checkout -b xiaohong/feature/4\n\n# \u521b\u5efa\u5b9e\u9a8c\u76ee\u5f55\nmkdir -p experiment\n\n# \u521b\u5efa\u5de5\u5177\u6587\u4ef6\necho \"1. \u90ae\u7bb1\u683c\u5f0f\u68c0\u67e5\u51fd\u6570\" &gt; experiment/utils.txt\ngit add experiment/utils.txt\ngit commit -m \"Add email check function\"\n\necho \"2. \u5bc6\u7801\u5f3a\u5ea6\u68c0\u67e5\u51fd\u6570\" &gt;&gt; experiment/utils.txt\ngit add experiment/utils.txt\ngit commit -m \"Add password check function\"\n</code></pre> <p>\u5f20\u4f1f\u7684\u5206\u652f</p> <p><pre><code># \u5f20\u4f1f\u521b\u5efa\u65b0\u5206\u652f\ngit checkout main\ngit checkout -b zhangwei/feature/4\n\n# \u786e\u4fdd\u5b9e\u9a8c\u76ee\u5f55\u5b58\u5728\nmkdir -p experiment\n\n# \u521b\u5efa\u767b\u5f55\u529f\u80fd\u6587\u4ef6\necho \"\u767b\u5f55\u9875\u9762\u8bbe\u8ba1\" &gt; experiment/login.txt\ngit add experiment/login.txt\ngit commit -m \"Add login page design\"\n</code></pre> \u51c6\u5907\u597d\u7684\u5c0f\u7ea2\u548c\u5f20\u4f1f\u7684\u5206\u652f\u5e94\u8be5\u5982\u4e0b</p> <p></p> <p>\u5f20\u4f1f\u53d1\u73b0\u5c0f\u7ea2\u7684\u5bc6\u7801\u68c0\u67e5\u51fd\u6570\u5f88\u5b9e\u7528\uff0c\u60f3\u8981\u5728\u767b\u5f55\u529f\u80fd\u4e2d\u4f7f\u7528\uff0c\u4f46\u662f\u8fd8\u4e0d\u60f3\u5408\u5e76\u5c0f\u7ea2\u7684\u6240\u6709\u63d0\u4ea4\u3002\u3002</p> <p><pre><code># \u67e5\u770b\u5c0f\u7ea2\u5206\u652f\u7684\u63d0\u4ea4\u5386\u53f2\ngit log xiaohong/feature/4\n&gt;&gt;&gt;\n&gt;&gt;&gt; commit d8f6173bec335204dfe18866a05d9fa9af66147d (xiaohong/feature/4)\n&gt;&gt;&gt; Author: lilong &lt;TsienDragon@outlook.com&gt;\n&gt;&gt;&gt; Date:   Thu Jan 30 16:47:38 2025 +0800\n&gt;&gt;&gt;\n&gt;&gt;&gt;   Add password check function\n&gt;&gt;&gt;\n&gt;&gt;&gt; commit 925abd9a8a1f842159d8defb0d721891ef50a221\n&gt;&gt;&gt; Author: lilong &lt;TsienDragon@outlook.com&gt;\n&gt;&gt;&gt; Date:   Thu Jan 30 16:47:05 2025 +0800\n&gt;&gt;&gt;\n&gt;&gt;&gt;   Add email check function\n&gt;&gt;&gt;\n&gt;&gt;&gt; commit f4a078a916e587d40f0368930318571d66e7f96d (origin/main, origin/HEAD, main)\n\n# \u5f20\u4f1f\u8981\u628a\u5c0f\u7ea2\u5b9e\u73b0\u7684\u90ae\u7bb1\u9a8c\u8bc1\u7684\u529f\u80fdpick \u8fc7\u6765\uff0c\u627e\u5230\u90ae\u7bb1\u9a8c\u8bc1\u51fd\u6570\u7684\u63d0\u4ea4 hash\n\ngit checkout zhangwei/feature/4 # \u786e\u4fdd\u5728\u5f20\u4f1f\u7684\u5206\u652f\ngit cherry-pick 925abd9a8a1f842159d8defb0d721891ef50a221  # 925abd9a8a1f842159d8defb0d721891ef50a221 \u662f\u5bc6\u7801\u68c0\u67e5\u51fd\u6570\u7684\u63d0\u4ea4 hash\n# \u4f60\u53ef\u4ee5\u4f7f\u7528 commit \u7684\u524d\u51e0\u4f4d\uff08\u901a\u5e38 7-10 \u4f4d\u5373\u53ef\uff09\uff0c\u53ea\u8981\u5b83\u5728\u5f53\u524d\u4ed3\u5e93\u4e2d\u662f\u552f\u4e00\u7684\n# \u6216\u8005\u7528 git cherry-pick 925a\n</code></pre> \u8fd9\u6837\u5f20\u4f1f\u7684\u5206\u652f\u4e2d\u5c31\u628a\u5c0f\u7ea2\u7684\u5bc6\u7801\u68c0\u67e5\u51fd\u6570pick \u8fc7\u6765\u4e86\u3002</p> <p></p> <p>\u5982\u56fe\u6240\u793a \u8fd9\u4e24\u4e2acommit \u7684\u5185\u5bb9\u4e00\u6478\u4e00\u6837\uff0c\u4f46\u662f\u4ed6\u4eec\u7684commit hash\u662f\u4e0d\u4e00\u6837\u7684\u3002</p>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#5-git-rebase","title":"5. git rebase","text":"<p>\u5728 Git \u7248\u672c\u63a7\u5236\u4e2d\uff0cgit rebase \u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u547d\u4ee4\uff0c\u4e3b\u8981\u7528\u4e8e\u6574\u7406\u63d0\u4ea4\u5386\u53f2\uff0c\u4f7f\u5176\u66f4\u52a0\u7ebf\u6027\u548c\u6e05\u6670 \u51c6\u5907\u5de5\u4f5c\uff1a\u6a21\u62df\u4e00\u4e2a\u9700\u8981\u8fdb\u884c rebase \u7684\u573a\u666f\u3002</p> <p>\u672c\u6587\u4ecb\u7ecd\u4e86 Git Rebase \u7684\u5178\u578b\u4f7f\u7528\u573a\u666f\uff0c\u5e76\u901a\u8fc7\u4e00\u4e2a \u5f20\u4f1f\uff08\u5f00\u53d1\u652f\u4ed8\u529f\u80fd\uff09\u4e0e\u5c0f\u7ea2\uff08\u5f00\u53d1\u7528\u6237\u8d44\u6599\u529f\u80fd\uff09\u5e76\u884c\u5f00\u53d1 \u7684\u6848\u4f8b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 git rebase \u6765\u6574\u7406 Git \u5386\u53f2\uff0c\u4f7f\u63d0\u4ea4\u8bb0\u5f55\u66f4\u6e05\u6670\u548c\u7ebf\u6027\u3002</p> <p>\u5f20\u4f1f\u548c\u5c0f\u7ea2\u5148\u540c\u65f6\u4ece\u5f53\u524d\u7684main \u5206\u652f\u57fa\u7840\u4e0a\uff0c\u5148\u72ec\u7acb\u5f00\u53d1</p> <p>\u5f20\u4f1f\u5f00\u53d1</p> <pre><code># \u521b\u5efa\u5e76\u5207\u6362\u5230\u529f\u80fd\u5206\u652f\ngit checkout main\ngit pull\ngit checkout -b zhangwei/feature/payment\n\n# \u5728\u529f\u80fd\u5206\u652f\u4e0a\u8fdb\u884c\u4e00\u4e9b\u63d0\u4ea4\necho \"\u6dfb\u52a0\u652f\u4ed8\u6309\u94ae\" &gt; experiment/payment.txt\ngit add experiment/payment.txt\ngit commit -m \"Add payment button\"\n\necho \"\u6dfb\u52a0\u652f\u4ed8\u5904\u7406\u51fd\u6570\" &gt;&gt; experiment/payment.txt\ngit add experiment/payment.txt\ngit commit -m \"Add payment handler\"\n</code></pre> <p>\u5c0f\u7ea2\u5f00\u53d1</p> <pre><code># \u5c0f\u7ea2\u5728\u5f20\u4f1f\u5f00\u53d1\u671f\u95f4\uff0c\u5b8c\u6210\u4e86\u7528\u6237\u8d44\u6599\u66f4\u65b0\u529f\u80fd\ngit checkout main\ngit pull\ngit checkout -b xiaohong/feature/profile\n\n# \u6dfb\u52a0\u7528\u6237\u8d44\u6599\u66f4\u65b0\u529f\u80fd\necho \"\u6dfb\u52a0\u7528\u6237\u5934\u50cf\u4e0a\u4f20\" &gt; experiment/profile.txt\ngit add experiment/profile.txt\ngit commit -m \"Add avatar upload\"\n\necho \"\u6dfb\u52a0\u4e2a\u4eba\u4fe1\u606f\u7f16\u8f91\" &gt;&gt; experiment/profile.txt\ngit add experiment/profile.txt\ngit commit -m \"Add profile editor\"\n</code></pre> <p>\u5c0f\u7ea2\u5148\u63d0\u4ea4\u5408\u5e76\u5230 main</p> <pre><code>git checkout main\ngit merge xiaohong/feature/profile\ngit push\n</code></pre> <p>\u73b0\u5728main\u540c\u6b65\u4e86\u5c0f\u7ea2\u7684\u7528\u6237\u8d44\u6599\u66f4\u65b0\u529f\u80fd\uff0c\u4f46\u662f\u5f20\u4f1f\u7684\u652f\u4ed8\u529f\u80fd\u8fd8\u6ca1\u6709\u540c\u6b65\uff0c\u6240\u4ee5\u9700\u8981\u5728zhangwei/feature/payment \u5206\u652f\u4e0a\u8fdb\u884crebase\u3002 \u5982\u679c\u76f4\u63a5\u4f7f\u7528merge \u4f1a\u8ba9main \u5206\u652f\u51fa\u73b0\u5206\u53c9\u3002\u5982\u679c\u60f3\u4fdd\u6301\u5206\u652f\u7ed3\u6784\u4e3a\u7ebf\u6027\uff0c\u5219\u9700\u8981\u7528\u5230rebase\u3002</p> <p></p> <p>\u5f20\u4f1f\u968f\u540e\u5f00\u59cb\u4f7f\u7528 rebase \u5408\u5e76\u5230\u81ea\u5df1\u7684\u5206\u652f</p> <pre><code># \u9996\u5148\u66f4\u65b0 main \u5206\u652f\ngit checkout main\ngit pull\n\n# \u5207\u56de\u529f\u80fd\u5206\u652f\u5e76\u6267\u884c rebase\ngit checkout zhangwei/feature/payment\ngit rebase main\n# \u4fdd\u6301\u4e86zhangwei \u5206\u652f\u548cmain\u7684\u7ebf\u6027\u7ed3\u6784\uff0c \u518d\u63d0\u4ea4merge request\n\n# \u5982\u679c\u6709\u51b2\u7a81\uff0c\u89e3\u51b3\u540e\u7ee7\u7eed\ngit add .\ngit rebase --continue\n# \u56e0\u4e3a rebase \u6539\u53d8\u4e86\u5386\u53f2\uff0c\u9700\u8981\u5f3a\u5236\u63a8\u9001\ngit push --force-with-lease origin zhangwei/feature/payment\n</code></pre> <p></p> <p>\u73b0\u5728zhangwei/feature/payment \u5206\u652f\u548cmain \u5206\u652f\u90fd\u662f\u7ebf\u6027\u7684\u4e86\uff0c\u5982\u4e0a\u56fe</p> <p>\u767b\u9646github \u9875\u9762\uff0c\u521b\u5efamerge request\uff0c\u6309\u4e0b\u56fe\u6240\u793a\u4f9d\u6b21\u6267\u884c\u3002 </p> <p></p> <p> \u6ce8\u610f\u9700\u8981\u5728merge request \u4e2d\u9009\u62e9rebase and merge\u9009\u9879  \u5982\u679c\u662fmerge \u5219main \u5c31\u4f1a\u51fa\u73b0\u5206\u53c9 </p> <p>\u672c\u5730\u540c\u6b65\u8ddf\u65b0</p> <p><pre><code>git checkout main\ngit pull\n</code></pre> </p> <p>\u73b0\u5728main \u5206\u652f\u4e5f\u662f\u7ebf\u6027\u4e86 \u540c\u65f6\u540c\u6b65\u4e86zhangwei \u5206\u652f\u7684\u66f4\u65b0.</p> <p>\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li>\u4e0d\u8981\u5728\u516c\u5171\u5206\u652f\u4e0a\u4f7f\u7528 rebase\uff08\u6bd4\u5982 main \u5206\u652f\uff09</li> <li>\u5f3a\u5236\u63a8\u9001\u8981\u8c28\u614e\u4f7f\u7528\uff0c\u786e\u4fdd\u4e0d\u4f1a\u5f71\u54cd\u4ed6\u4eba\u7684\u5de5\u4f5c</li> <li>\u5982\u679c\u9047\u5230\u590d\u6742\u7684\u51b2\u7a81\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>git rebase --abort</code> \u53d6\u6d88\u64cd\u4f5c</li> <li>\u5efa\u8bae\u5728 rebase \u4e4b\u524d\u521b\u5efa\u4e00\u4e2a\u5907\u4efd\u5206\u652f\uff1a</li> </ul> <pre><code>git branch zhangwei/feature/payment-backup\n</code></pre>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#6-git-reset","title":"6. git reset","text":"<p>\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50</p> <p>\u521a\u5f00\u59cb\u7684\u72b6\u6001 </p> <p>\u60f3\u628amain reset \u5230\u5408\u5e76\u4e4b\u524d\u7684\u72b6\u6001</p> <p>\u627e\u5230\u5408\u5e76\u4e4b\u524d\u7684commit hash</p> <p><pre><code>git reset --hard e806bd\n</code></pre> rest\u4e4b\u540e\u7684\u72b6\u6001 </p> <p>\u66f4\u8fdb\u4e00\u6b65\uff0c<code>git reset</code> \u6709\u4e09\u79cd\u6a21\u5f0f\uff1a</p> <ul> <li><code>--soft</code>\uff1a\u4ec5\u91cd\u7f6e HEAD \u5230\u6307\u5b9a\u63d0\u4ea4\uff0c\u4fdd\u7559\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u76ee\u5f55\u7684\u66f4\u6539</li> <li><code>--mixed</code>\uff08\u9ed8\u8ba4\uff09\uff1a\u91cd\u7f6e HEAD \u548c\u6682\u5b58\u533a\uff0c\u4fdd\u7559\u5de5\u4f5c\u76ee\u5f55\u7684\u66f4\u6539</li> <li><code>--hard</code>\uff1a\u91cd\u7f6e HEAD\u3001\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u76ee\u5f55\uff0c\u5b8c\u5168\u56de\u5230\u6307\u5b9a\u63d0\u4ea4\u7684\u72b6\u6001</li> </ul> <p>\u51c6\u5907\u5de5\u4f5c\uff1a\u521b\u5efa\u4e00\u4e2a\u573a\u666f\u6765\u6f14\u793a\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u4ef6\u72b6\u6001\u3002</p> <ol> <li>\u521d\u59cb\u8bbe\u7f6e\uff1a</li> </ol> <pre><code># \u521b\u5efa\u65b0\u5206\u652f\ngit checkout main\ngit checkout -b zhangwei/feature/reset-demo\n\n# \u521b\u5efa\u5b9e\u9a8c\u76ee\u5f55\nmkdir -p experiment\n\n# \u7b2c\u4e00\u4e2a\u63d0\u4ea4\uff1a\u6dfb\u52a0\u9879\u76ee\u914d\u7f6e\necho \"login\" &gt; experiment/login.txt\necho \"\u9879\u76ee\u914d\u7f6e\u6587\u4ef6\" &gt; experiment/config.txt\ngit add experiment/config.txt\ngit add experiment/login.txt\n\ngit commit -m \"Initial commit: Add config file\"\n\n# \u7b2c\u4e8c\u4e2a\u63d0\u4ea4\uff1a\u6dfb\u52a0\u7528\u6237\u6a21\u5757\necho \"\u7528\u6237\u767b\u5f55\u529f\u80fd\" &gt; experiment/user.txt\ngit add experiment/user.txt\ngit commit -m \"Add user login module\"\n\n# \u7b2c\u4e09\u4e2a\u63d0\u4ea4\uff1a\u6dfb\u52a0\u8ba2\u5355\u6a21\u5757\necho \"\u8ba2\u5355\u5904\u7406\u529f\u80fd\" &gt; experiment/order.txt\ngit add experiment/order.txt\ngit commit -m \"Add order processing module\"\n\n# \u7b2c\u56db\u4e2a\u63d0\u4ea4\uff1a\u66f4\u65b0\u914d\u7f6e\necho \"\u66f4\u65b0\u914d\u7f6e\u53c2\u6570\" &gt;&gt; experiment/config.txt\ngit add experiment/config.txt\ngit commit -m \"Update config settings\"\n\n# \u67e5\u770b\u63d0\u4ea4\u5386\u53f2\ngit log --oneline\n# \u4f1a\u663e\u793a\u7c7b\u4f3c\uff1a\n# abc1234 Update config settings\n# def5678 Add order processing module\n# ghi9012 Add user login module\n# jkl3456 Initial commit: Add config file\n</code></pre> <p>\u73b0\u5728\u51c6\u5907\u6f14\u793a\u4e0d\u540c\u7684\u6587\u4ef6\u72b6\u6001\uff1a</p> <pre><code># 1. \u5df2\u6682\u5b58\u7684\u6587\u4ef6\necho \"\u5df2\u6682\u5b58\u7684\u6587\u4ef6\" &gt; experiment/staged.txt\ngit add experiment/staged.txt\n\n# 2. \u5df2\u4fee\u6539\u4f46\u672a\u6682\u5b58\u7684\u6587\u4ef6\necho \"\u65b0\u7684\u8ba2\u5355\u529f\u80fd\" &gt;&gt; experiment/order.txt\n\n# 3. \u672a\u8ddf\u8e2a\u7684\u6587\u4ef6\necho \"\u672a\u8ddf\u8e2a\u7684\u6587\u4ef6\" &gt; experiment/untracked.txt\nmv experiment/config.txt experiment/configs.txt\nrm experiment/login.txt\ngit mv experiment/register.txt experiment/register_func.txt\n</code></pre> <ol> <li>\u67e5\u770b\u5f53\u524d\u72b6\u6001\uff1a</li> </ol> <pre><code>Changes to be committed:\n(use \"git restore --staged &lt;file&gt;...\" to unstage)\n     renamed:    experiment/register.txt -&gt; experiment/register_func.txt\n     new file:   experiment/staged.txt\n\nChanges not staged for commit:\n(use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n(use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n      deleted:    experiment/config.txt\n      deleted:    experiment/login.txt\n      modified:   experiment/order.txt\n\nUntracked files:\n(use \"git add &lt;file&gt;...\" to include in what will be committed)\n      experiment/configs.txt\n      experiment/untracked.txt\n</code></pre> <p>\u5728vscode \u7684source countrol \u4e2d\u4e5f\u53ef\u4ee5\u770b\u5230\u5404\u4e2a\u6587\u4ef6\u7684\u72b6\u6001</p> <p></p> <ul> <li>R \u8868\u793arenamed</li> <li>M \u8868\u793amodified</li> <li>D \u8868\u793adeleted</li> <li>U \u8868\u793auntracked</li> <li>A \u8868\u793aadded</li> </ul>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#1-git-reset-soft","title":"1. \u4f7f\u7528 <code>git reset --soft</code>\uff1a","text":"<p>\u5728 Git \u547d\u4ee4 <code>git reset --soft HEAD~1</code> \u4e2d\uff0c<code>HEAD~1</code> \u7684\u542b\u4e49\u5982\u4e0b\uff1a - <code>HEAD</code> \uff1a\u6307\u7684\u662f\u5f53\u524d\u5206\u652f\u7684\u6700\u65b0\u63d0\u4ea4\uff08\u5373 <code>HEAD</code> \u6307\u9488\u6307\u5411\u7684\u63d0\u4ea4\uff09\u3002</p> <ul> <li><code>~1</code> \uff1a\u8868\u793a\u201c\u5411\u4e0a\u56de\u9000 1 \u6b21\u63d0\u4ea4\u201d\uff08\u5373 <code>HEAD</code> \u7684\u4e0a\u4e00\u4e2a\u63d0\u4ea4\uff0c\u4e5f\u5c31\u662f <code>HEAD^</code>\uff09\u3002</li> <li> <p><code>HEAD~1</code> \u7b49\u540c\u4e8e <code>HEAD^</code>\uff0c\u8868\u793a\u56de\u9000 1 \u6b21\u63d0\u4ea4\u3002</p> </li> <li> <p><code>HEAD~2</code> \u8868\u793a\u56de\u9000 2 \u6b21\u63d0\u4ea4\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> </li> </ul> <p>\u4f8b\u5b50</p> <p>\u5047\u8bbe\u4f60\u7684 Git \u63d0\u4ea4\u5386\u53f2\u5982\u4e0b\uff1a</p> <p><pre><code>A -- B -- C (HEAD)\n</code></pre> \u6267\u884c <code>git reset --soft HEAD~1</code> \u540e\uff0c<code>HEAD</code> \u4f1a\u56de\u9000\u5230 <code>B</code>\uff0c\u4f46\u4e0d\u4f1a\u4fee\u6539\u6682\u5b58\u533a\uff08staging area\uff09\u548c\u5de5\u4f5c\u533a\uff08working directory\uff09\uff1a</p> <p><pre><code>A -- B (HEAD)\n</code></pre> \u4f46 <code>C</code> \u7684\u66f4\u6539\u4ecd\u7136\u5b58\u5728\u4e8e\u6682\u5b58\u533a\uff0c\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u91cd\u65b0\u63d0\u4ea4\u5b83\u6216\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002\u4e0d\u540c\u7684 <code>git reset</code> \u9009\u9879\uff1a - <code>--soft</code>\uff1a\u53ea\u56de\u9000 <code>HEAD</code> \u6307\u9488\uff0c\u63d0\u4ea4\u7684\u66f4\u6539\u4ecd\u7136\u5728\u6682\u5b58\u533a\uff08<code>git status</code> \u4f1a\u663e\u793a\u6587\u4ef6\u4ecd\u5904\u4e8e \"Changes to be committed\" \u72b6\u6001\uff09\u3002</p> <ul> <li> <p><code>--mixed</code>\uff08\u9ed8\u8ba4\uff09\uff1a\u56de\u9000 <code>HEAD</code> \u6307\u9488\uff0c\u5e76\u4e14\u64a4\u9500 <code>git add</code> \u7684\u64cd\u4f5c\uff0c\u4f46\u4e0d\u4f1a\u5f71\u54cd\u5de5\u4f5c\u76ee\u5f55\u3002</p> </li> <li> <p><code>--hard</code>\uff1a\u5f7b\u5e95\u56de\u9000\u63d0\u4ea4\uff0c\u5e76\u4e14\u5220\u9664\u6240\u6709\u4ee3\u7801\u6539\u52a8\uff08\u614e\u7528\uff09\u3002 \u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684 <code>git reset</code> \u9009\u9879\u3002</p> </li> </ul> <pre><code># \u8f6f\u91cd\u7f6e\u5230\u4e0a\u4e00\u4e2a\u63d0\u4ea4\ngit reset --soft HEAD~1\ngit status\n</code></pre> <p>\u73b0\u5728\u7684\u72b6\u6001 <pre><code>Changes to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   experiment/config.txt\n        renamed:    experiment/register.txt -&gt; experiment/register_func.txt\n        new file:   experiment/staged.txt\n\nChanges not staged for commit:\n  (use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        deleted:    experiment/config.txt\n        deleted:    experiment/login.txt\n        modified:   experiment/order.txt\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        experiment/configs.txt\n        experiment/untracked.txt\n</code></pre> Update config settings \u7684commit \u6ca1\u6709\u4e86\uff0c\u4f46\u662f\u5176\u4ed6\u7684\u6587\u4ef6\u72b6\u6001\u90fd\u6ca1\u6709\u53d8\u5316</p>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#git-reset-mixed","title":"\u4f7f\u7528 <code>git reset --mixed</code>\uff08\u9ed8\u8ba4\u6a21\u5f0f\uff09\uff1a","text":"<p>\u5148\u6062\u590d\u5404\u79cd\u6587\u4ef6\u7684\u72b6\u6001</p> <pre><code>git reset --hard HEAD@{1}\ngit mv experiment/register.txt experiment/register_func.txt\necho \"staged\" &gt;&gt; experiment/staged.txt\ngit add experiment/staged.txt\n echo \"change user\" &gt;&gt; experiment/user.txt\ngit add  experiment/user.txt\necho \"change order\" &gt;&gt; experiment/order.txt\nrm experiment/login.txt\n</code></pre> <p>\u5404\u79cd\u6587\u4ef6\u7684\u72b6\u6001 </p> <pre><code>git reset HEAD~2  # \u6216 git reset --mixed HEAD~1\ngit status\n&gt;&gt;&gt; Changes not staged for commit:\n&gt;&gt;&gt;  (use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n&gt;&gt;&gt;  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n&gt;&gt;&gt;        modified:   experiment/config.txt\n&gt;&gt;&gt;        deleted:    experiment/login.txt\n&gt;&gt;&gt;        deleted:    experiment/register.txt\n&gt;&gt;&gt;        modified:   experiment/user.txt\n\n&gt;&gt;&gt; Untracked files:\n&gt;&gt;&gt;   (use \"git add &lt;file&gt;...\" to include in what will be committed)\n&gt;&gt;&gt;        experiment/configs.txt\n&gt;&gt;&gt;        experiment/order.txt\n&gt;&gt;&gt;        experiment/register_func.txt\n&gt;&gt;&gt;        experiment/staged.txt\n&gt;&gt;&gt;        experiment/untracked.txt\n</code></pre> <p>\u6e05\u9664\u4e86staged \u4fee\u6539\uff0c\u4f46\u662f\u5176\u4ed6\u7684\u6587\u4ef6\u72b6\u6001\u6ca1\u6709\u53d8\u5316\uff0cstaged \u53d8\u6210\u4e86 un-staged. user.txt \u53d8\u6210\u4e86un-staged, \u56e0\u4e3auser.txt \u4e4b\u524d\u5df2\u7ecftrack\u8fc7\u4e86\u3002staged.txt \u53d8\u6210\u4e86untracked, \u56e0\u4e3astaged.txt \u6ca1\u6709track\u8fc7\u3002register_func.txt \u53d8\u6210\u4e86untracked, \u56e0\u4e3aregister_func.txt \u6ca1\u6709track\u8fc7, \u56e0\u4e3aregister\u7684commit \u5df2\u7ecf\u88ab\u64a4\u56de\u4e86\uff0c\u5f53\u524d\u7684commit \u6ca1\u6709track \u8fc7register.txt \u548cregister_func.txt\uff0c\u540e\u8005\u662f\u4eceregister.txt \u91cd\u547d\u540d\u800c\u6765\u3002</p>"},{"location":"book/phase1/linux_basics/06_git_version_control.html#git-reset-hard","title":"\u4f7f\u7528 <code>git reset --hard</code>","text":"<p><pre><code>git reset @{1} # \u56de\u590d\u5230\u524d\u4e24\u4e2acommit\n</code></pre> \u4e22\u5f03\u6240\u6709\u4fee\u6539</p> <p></p> <p>\u73b0\u5728\u6240\u6709\u4fee\u6539\u7684\u90fd\u6ca1\u6709\u4e86 </p> <p>\u518d\u6a21\u62df\u5404\u79cd\u5404\u79cd\u6587\u4ef6\u72b6\u6001</p> <pre><code>git mv experiment/register.txt experiment/register_func.txt\necho \"staged\" &gt;&gt; experiment/staged.txt\ngit add experiment/staged.txt\n echo \"change user\" &gt;&gt; experiment/user.txt\ngit add  experiment/user.txt\necho \"change order\" &gt;&gt; experiment/order.txt\nrm experiment/login.txt\necho \"untracked\" &gt;&gt; experiment/untracked.txt\necho \"config update 2\" &gt;&gt; experiment/config.txt\n</code></pre> <p>\u76ee\u524d\u7684\u72b6\u6001</p> <p></p> <p>config.txt \u5185\u5bb9 </p> <pre><code>git reset --hard HEAD~2 # reset \u8fde\u4e2acommit\n</code></pre> <p></p> <p>reset \u4e4b\u540e\u53ea\u5269\u4e0b\u4e24\u4e2acommit\uff0c\u540c\u65f6source control \u53ea\u5269\u4e0buntracked.txt</p> <p>Git <code>reset</code> \u547d\u4ee4\u5bf9\u4e0d\u540c\u6587\u4ef6\u72b6\u6001\u7684\u5f71\u54cd</p> \u6587\u4ef6\u72b6\u6001 git reset --soft git reset --mixed git reset --hard HEAD\uff08\u63d0\u4ea4\u5386\u53f2\uff09 \u56de\u9000\u5230\u6307\u5b9a\u63d0\u4ea4 \u56de\u9000\u5230\u6307\u5b9a\u63d0\u4ea4 \u56de\u9000\u5230\u6307\u5b9a\u63d0\u4ea4 \u6682\u5b58\u533a\uff08Staging Area\uff09 \u4e0d\u53d8 \u6e05\u9664\uff08\u56de\u5230 HEAD \u72b6\u6001\uff09 \u6e05\u9664\uff08\u56de\u5230 HEAD \u72b6\u6001\uff09 \u5de5\u4f5c\u533a\uff08Working Directory\uff09 \u4e0d\u53d8 \u4e0d\u53d8 \u6062\u590d\u4e3a HEAD \u72b6\u6001\uff08\u4e22\u5f03\u5df2\u8ddf\u8e2a\u6587\u4ef6\u7684\u4fee\u6539\uff09 \u5df2\u63d0\u4ea4\u7684\u6587\u4ef6\uff08Tracked, Unmodified\uff09 \u4e0d\u53d8 \u4e0d\u53d8 \u4e0d\u53d8 \u5df2\u4fee\u6539\u4f46\u672a\u63d0\u4ea4\u7684\u6587\u4ef6\uff08Tracked, Modified\uff09 \u4e0d\u53d8 \u4e0d\u53d8 \u4e22\u5f03\u4fee\u6539\uff0c\u6062\u590d\u4e3a HEAD \u7248\u672c \u5df2\u6682\u5b58\u4f46\u672a\u63d0\u4ea4\u7684\u6587\u4ef6\uff08Tracked, Staged\uff09 \u4fdd\u6301\u6682\u5b58 \u64a4\u56de\u6682\u5b58\uff0c\u4f46\u4fdd\u7559\u4fee\u6539 \u4e22\u5f03\u4fee\u6539\uff0c\u6062\u590d\u4e3a HEAD \u7248\u672c \u672a\u8ddf\u8e2a\u7684\u6587\u4ef6\uff08Untracked\uff09 \u4e0d\u53d8 \u4e0d\u53d8 \u4e0d\u53d8\uff08\u4e0d\u4f1a\u5220\u9664\uff09 \u5ffd\u7565\u7684\u6587\u4ef6\uff08Ignored\uff09 \u4e0d\u53d8 \u4e0d\u53d8 \u4e0d\u53d8 <p>\u8865\u5145 - <code>--soft</code>\uff1a\u53ea\u56de\u9000\u63d0\u4ea4\u5386\u53f2 \uff0c\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u4fdd\u6301\u4e0d\u53d8 \u3002\u9002\u7528\u4e8e\u64a4\u9500\u6700\u8fd1\u7684\u63d0\u4ea4\u4f46\u4fdd\u7559\u4ee3\u7801\u72b6\u6001\uff08\u7c7b\u4f3c <code>git commit --amend</code>\uff09\u3002</p> <ul> <li> <p><code>--mixed</code>\uff08\u9ed8\u8ba4\uff09\uff1a\u56de\u9000\u63d0\u4ea4\u5386\u53f2\u5e76\u6e05\u9664\u6682\u5b58\u533a \uff0c\u4f46\u4e0d\u5f71\u54cd\u5de5\u4f5c\u533a \u3002\u9002\u7528\u4e8e\u56de\u9000\u63d0\u4ea4\u4f46\u4fdd\u7559\u4ee3\u7801\u4fee\u6539\uff0c\u91cd\u65b0 <code>git add</code> \u4e4b\u540e\u53ef\u4ee5\u91cd\u65b0\u63d0\u4ea4\u3002</p> </li> <li> <p><code>--hard</code>\uff1a\u56de\u9000\u63d0\u4ea4\u5386\u53f2\u3001\u6e05\u9664\u6682\u5b58\u533a\u3001\u91cd\u7f6e\u5de5\u4f5c\u533a \uff0c\u5373\u5b8c\u5168\u6062\u590d\u5230\u6307\u5b9a\u63d0\u4ea4\u7684\u72b6\u6001 \uff0c\u5df2\u4fee\u6539\u4f46\u672a\u63d0\u4ea4\u7684\u66f4\u6539\u4f1a\u88ab\u4e22\u5f03 \uff08\u614e\u7528\uff01 \uff09.</p> </li> </ul> <p>\u5176\u4ed6\u76f8\u5173\u547d\u4ee4 \u5982\u679c <code>git reset --hard</code> \u4e4b\u540e\u53d1\u73b0\u8bef\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5c1d\u8bd5\uff1a</p> <p><pre><code>git reflog\ngit reset --hard HEAD@{1}  # \u6062\u590d\u5230 reset \u4e4b\u524d\u7684\u72b6\u6001\n</code></pre> \u5982\u679c\u60f3\u5220\u9664\u672a\u8ddf\u8e2a\u7684\u6587\u4ef6 \uff0c\u9700\u624b\u52a8\u8fd0\u884c\uff1a</p> <p><pre><code>git clean -fd  # \u5220\u9664\u672a\u8ddf\u8e2a\u7684\u6587\u4ef6\u548c\u76ee\u5f55\ngit clean -fx  # \u5220\u9664\u672a\u8ddf\u8e2a\u7684\u6587\u4ef6\uff0c\u5305\u62ec .gitignore \u91cc\u5ffd\u7565\u7684\u6587\u4ef6\n</code></pre> \u8fd9\u5f20\u8868\u53ef\u4ee5\u5e2e\u52a9\u4f60\u9009\u62e9\u9002\u5408\u7684 <code>reset</code> \u65b9\u5f0f\uff0c\u4ee5\u907f\u514d\u6570\u636e\u4e22\u5931\u3002</p> <p>\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li><code>--hard</code> \u662f\u4e0d\u53ef\u9006\u7684\uff0c\u4f7f\u7528\u524d\u8981\u786e\u4fdd\u4e0d\u9700\u8981\u4fdd\u7559\u4efb\u4f55\u66f4\u6539</li> <li>\u672a\u8ddf\u8e2a\u7684\u6587\u4ef6\u4e0d\u53d7 <code>git reset</code> \u5f71\u54cd</li> <li>\u5982\u679c\u4e0d\u786e\u5b9a\uff0c\u53ef\u4ee5\u5148\u521b\u5efa\u5206\u652f\u5907\u4efd\uff1a</li> </ul> <pre><code>git branch backup-before-reset\n</code></pre> <ul> <li>\u53ef\u4ee5\u4f7f\u7528 <code>git reflog</code> \u67e5\u770b\u64cd\u4f5c\u5386\u53f2\uff0c\u5728\u610f\u5916\u91cd\u7f6e\u540e\u6062\u590d\uff1a</li> </ul> <pre><code>git reflog  # \u67e5\u770b\u64cd\u4f5c\u5386\u53f2\ngit reset HEAD@{1}  # \u6062\u590d\u5230\u4e0a\u4e00\u4e2a\u64cd\u4f5c\uff0c \u53ef\u4ee5\u7b80\u5199\u4e3a git reset @{1}\n</code></pre> <p>git reset HEAD@{1} \u4e5f\u53ef\u4ee5\u4f7f\u7528 --soft\u3001--mixed \u548c --hard \u9009\u9879\uff0c\u4f5c\u7528\u4e0e git reset  \u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7 HEAD@{1} \u6307\u7684\u662f Git reflog \u8bb0\u5f55\u4e2d\u7684\u4e0a\u4e00\u4e2a HEAD \u4f4d\u7f6e <p>\u56e0\u6b64\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u5c3d\u91cf\u5c06\u5de5\u4f5c\u53ca\u65f6commit \u548cpush\uff0c\u907f\u514d\u51fa\u73b0\u4e22\u5931\u6570\u636e\u7684\u60c5\u51b5\u3002\u5b9e\u5728\u8981\u7acb\u9a6c\u64cd\u4f5c\uff0c\u4e0d\u65b9\u4fbfcommit \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528stash \u6682\u5b58\uff0c\u7136\u540e\u5728\u5408\u9002\u7684\u65f6\u5019\u518d\u8fdb\u884c\u64cd\u4f5c</p>"},{"location":"book/phase1/linux_basics/07_development_tools.html","title":"Common Development Tools","text":"<p>This section will cover various development tools commonly used in Linux, such as compilers, debuggers, and IDEs.</p>"},{"location":"book/phase1/linux_basics/07_development_tools.html#concept-explanation","title":"Concept Explanation","text":"<p>Development tools are programs used to write, debug, and maintain software, such as compilers, debuggers, and Integrated Development Environments (IDEs).</p>"},{"location":"book/phase1/linux_basics/07_development_tools.html#parameter-explanation","title":"Parameter Explanation","text":"<ul> <li><code>gcc</code>: GNU Compiler Collection, used to compile C and C++ programs.</li> <li><code>-o</code>: Specifies the output file name.</li> <li><code>gdb</code>: GNU Debugger, used to debug programs.</li> <li><code>break</code>: Sets a breakpoint.</li> <li><code>run</code>: Runs the program.</li> <li>IDE: Integrated Development Environment, such as VSCode and PyCharm.</li> </ul>"},{"location":"book/phase1/linux_basics/07_development_tools.html#practical-examples","title":"Practical Examples","text":"<ol> <li>Use <code>gcc -o hello hello.c</code> to compile a C program.</li> <li>Use <code>gdb hello</code> to debug a program, set a breakpoint, and run it.</li> <li>Open a project in VSCode, use the built-in terminal to compile and run the program.</li> </ol>"},{"location":"book/phase1/linux_basics/07_development_tools.html#test-questions","title":"Test Questions","text":"<ol> <li>How do you use <code>gcc</code> to compile a file named <code>main.c</code>?</li> <li>Which command is used to start the <code>gdb</code> debugger?</li> <li>What is an IDE, and what is its purpose?</li> </ol>"},{"location":"book/phase1/linux_basics/08_networking_remote_operations.html","title":"Networking and Remote Operations","text":"<p>This section will cover networking tools and techniques for remote operations, such as SSH and SCP.</p>"},{"location":"book/phase1/linux_basics/08_networking_remote_operations.html#concept-explanation","title":"Concept Explanation","text":"<p>Networking and remote operations involve technologies for managing and accessing remote computer resources over a network.</p>"},{"location":"book/phase1/linux_basics/08_networking_remote_operations.html#parameter-explanation","title":"Parameter Explanation","text":"<ul> <li><code>ssh</code>: Secure Shell protocol, used for secure login to remote computers.</li> <li><code>-p</code>: Specifies the port.</li> <li><code>scp</code>: Secure Copy protocol, used for secure file transfer between computers.</li> <li><code>-r</code>: Recursive copy of directories.</li> <li><code>rsync</code>: Used for efficient file transfer and synchronization.</li> <li><code>-a</code>: Archive mode, preserves file permissions.</li> </ul>"},{"location":"book/phase1/linux_basics/08_networking_remote_operations.html#practical-examples","title":"Practical Examples","text":"<ol> <li>Use <code>ssh user@host</code> to log in to a remote server.</li> <li>Use <code>scp file.txt user@host:/path</code> to transfer a file to a remote server.</li> <li>Use <code>rsync -avz /source user@host:/destination</code> to synchronize a folder.</li> </ol>"},{"location":"book/phase1/linux_basics/08_networking_remote_operations.html#test-questions","title":"Test Questions","text":"<ol> <li>How do you use <code>ssh</code> to log in to a remote server?</li> <li>Which command can be used to recursively copy directories?</li> <li>How do you synchronize local and remote directories?</li> </ol>"},{"location":"book/phase1/linux_basics/09_programming_environment.html","title":"Programming Environment Configuration","text":"<p>This section will cover setting up a development environment in Linux, including installing compilers and configuring IDEs.</p>"},{"location":"book/phase1/linux_basics/09_programming_environment.html#concept-explanation","title":"Concept Explanation","text":"<p>Programming environment configuration involves installing and setting up development tools and libraries to support programming activities.</p>"},{"location":"book/phase1/linux_basics/09_programming_environment.html#parameter-explanation","title":"Parameter Explanation","text":"<ul> <li><code>apt-get</code>\uff1aCommand-line tool used to install software packages.</li> <li><code>install</code>\uff1aInstalls software packages.</li> <li><code>pip</code>\uff1aPython package manager.</li> <li><code>install</code>\uff1aInstalls Python packages.</li> <li>Virtual Environment\uff1aTool used to isolate Python projects.</li> <li><code>virtualenv</code>\uff1aCreates a virtual environment.</li> </ul>"},{"location":"book/phase1/linux_basics/09_programming_environment.html#practical-examples","title":"Practical Examples","text":"<ol> <li>Use <code>apt-get install python3</code> to install Python.</li> <li>Use <code>pip install numpy</code> to install a Python package.</li> <li>Use <code>virtualenv myenv</code> to create a virtual environment.</li> </ol>"},{"location":"book/phase1/linux_basics/09_programming_environment.html#test-questions","title":"Test Questions","text":"<ol> <li>How do you use <code>apt-get</code> to install software packages?</li> <li>Which command is used to install Python packages?</li> <li>How do you create and activate a virtual environment?</li> </ol>"},{"location":"book/phase1/linux_basics/10_performance_tuning.html","title":"Performance Tuning and System Monitoring","text":"<p>This section will cover tools and techniques for monitoring and improving system performance in Linux.</p>"},{"location":"book/phase1/linux_basics/10_performance_tuning.html#_1","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>\u6027\u80fd\u8c03\u4f18\u548c\u7cfb\u7edf\u76d1\u63a7\u6d89\u53ca\u4f18\u5316\u7cfb\u7edf\u6027\u80fd\u548c\u76d1\u63a7\u8d44\u6e90\u4f7f\u7528\u3002</p>"},{"location":"book/phase1/linux_basics/10_performance_tuning.html#_2","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li><code>top</code>\uff1a\u5b9e\u65f6\u663e\u793a\u7cfb\u7edf\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\u3002</li> <li><code>-u</code>\uff1a\u6309\u7528\u6237\u8fc7\u6ee4\u3002</li> <li><code>htop</code>\uff1a\u4ea4\u4e92\u5f0f\u8fdb\u7a0b\u67e5\u770b\u5668\u3002</li> <li><code>F5</code>\uff1a\u5207\u6362\u5230\u6811\u89c6\u56fe\u3002</li> <li><code>iotop</code>\uff1a\u663e\u793a\u78c1\u76d8 I/O \u4f7f\u7528\u60c5\u51b5\u3002</li> </ul>"},{"location":"book/phase1/linux_basics/10_performance_tuning.html#_3","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":"<ol> <li>\u4f7f\u7528 <code>top</code> \u67e5\u770b\u5b9e\u65f6\u7cfb\u7edf\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\u3002</li> <li>\u4f7f\u7528 <code>htop</code> \u4ee5\u4ea4\u4e92\u65b9\u5f0f\u7ba1\u7406\u8fdb\u7a0b\u3002</li> <li>\u4f7f\u7528 <code>iotop</code> \u76d1\u63a7\u78c1\u76d8 I/O \u6d3b\u52a8\u3002</li> </ol>"},{"location":"book/phase1/linux_basics/10_performance_tuning.html#_4","title":"\u6d4b\u8bd5\u9898\u76ee","text":"<ol> <li>\u5982\u4f55\u67e5\u770b\u7cfb\u7edf\u7684 CPU \u548c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff1f</li> <li>\u4f7f\u7528\u54ea\u4e2a\u547d\u4ee4\u53ef\u4ee5\u4ea4\u4e92\u5f0f\u7ba1\u7406\u8fdb\u7a0b\uff1f</li> <li>\u5982\u4f55\u76d1\u63a7\u78c1\u76d8 I/O \u6d3b\u52a8\uff1f</li> </ol>"},{"location":"book/phase1/linux_basics/11_containers_virtualization.html","title":"\u5bb9\u5668\u548c\u865a\u62df\u5316","text":""},{"location":"book/phase1/linux_basics/11_containers_virtualization.html#_2","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>\u5bb9\u5668\u548c\u865a\u62df\u5316\u6280\u672f\u7528\u4e8e\u5728\u5355\u4e00\u7269\u7406\u4e3b\u673a\u4e0a\u8fd0\u884c\u591a\u4e2a\u72ec\u7acb\u7684\u64cd\u4f5c\u7cfb\u7edf\u73af\u5883\u3002</p>"},{"location":"book/phase1/linux_basics/11_containers_virtualization.html#_3","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li>Docker\uff1a\u5bb9\u5668\u5316\u5e73\u53f0\u3002</li> <li><code>docker run</code>\uff1a\u8fd0\u884c\u5bb9\u5668\u3002</li> <li><code>docker pull</code>\uff1a\u62c9\u53d6\u955c\u50cf\u3002</li> <li>VirtualBox\uff1a\u865a\u62df\u673a\u7ba1\u7406\u5668\u3002</li> <li><code>VBoxManage</code>\uff1a\u547d\u4ee4\u884c\u7ba1\u7406\u5de5\u5177\u3002</li> </ul>"},{"location":"book/phase1/linux_basics/11_containers_virtualization.html#_4","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":"<ol> <li>\u4f7f\u7528 <code>docker run hello-world</code> \u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u5bb9\u5668\u3002</li> <li>\u4f7f\u7528 <code>docker pull ubuntu</code> \u62c9\u53d6 Ubuntu \u955c\u50cf\u3002</li> <li>\u4f7f\u7528 VirtualBox \u521b\u5efa\u548c\u7ba1\u7406\u865a\u62df\u673a\u3002</li> </ol>"},{"location":"book/phase1/linux_basics/11_containers_virtualization.html#_5","title":"\u6d4b\u8bd5\u9898\u76ee","text":"<ol> <li>\u5982\u4f55\u8fd0\u884c\u4e00\u4e2a Docker \u5bb9\u5668\uff1f</li> <li>\u4f7f\u7528\u54ea\u4e2a\u547d\u4ee4\u53ef\u4ee5\u62c9\u53d6 Docker \u955c\u50cf\uff1f</li> <li>\u4ec0\u4e48\u662f\u865a\u62df\u5316\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f</li> </ol>"},{"location":"book/phase1/linux_basics/12_file_data_processing.html","title":"File and Data Processing","text":"<p>This section will cover tools and techniques for processing files and data in Linux, such as awk, sed, and grep.</p>"},{"location":"book/phase1/linux_basics/12_file_data_processing.html#_1","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>\u6587\u4ef6\u548c\u6570\u636e\u5904\u7406\u6d89\u53ca\u4f7f\u7528\u5de5\u5177\u548c\u547d\u4ee4\u884c\u64cd\u4f5c\u6765\u7ba1\u7406\u548c\u5904\u7406\u6587\u4ef6\u5185\u5bb9\u3002</p>"},{"location":"book/phase1/linux_basics/12_file_data_processing.html#_2","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li><code>cat</code>\uff1a\u8fde\u63a5\u5e76\u663e\u793a\u6587\u4ef6\u5185\u5bb9\u3002</li> <li><code>grep</code>\uff1a\u641c\u7d22\u6587\u672c\u4e2d\u7684\u6a21\u5f0f\u3002</li> <li><code>-i</code>\uff1a\u5ffd\u7565\u5927\u5c0f\u5199\u3002</li> <li><code>awk</code>\uff1a\u5f3a\u5927\u7684\u6587\u672c\u5904\u7406\u5de5\u5177\u3002</li> <li><code>-F</code>\uff1a\u6307\u5b9a\u5b57\u6bb5\u5206\u9694\u7b26\u3002</li> </ul>"},{"location":"book/phase1/linux_basics/12_file_data_processing.html#_3","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":"<ol> <li>\u4f7f\u7528 <code>cat file.txt</code> \u67e5\u770b\u6587\u4ef6\u5185\u5bb9\u3002</li> <li>\u4f7f\u7528 <code>grep -i \"pattern\" file.txt</code> \u641c\u7d22\u6587\u4ef6\u4e2d\u7684\u6a21\u5f0f\u3002</li> <li>\u4f7f\u7528 <code>awk -F \",\" '{print $1}' file.csv</code> \u5904\u7406 CSV \u6587\u4ef6\u3002</li> </ol>"},{"location":"book/phase1/linux_basics/12_file_data_processing.html#_4","title":"\u6d4b\u8bd5\u9898\u76ee","text":"<ol> <li>\u5982\u4f55\u67e5\u770b\u6587\u4ef6\u7684\u5185\u5bb9\uff1f</li> <li>\u4f7f\u7528\u54ea\u4e2a\u547d\u4ee4\u53ef\u4ee5\u641c\u7d22\u6587\u4ef6\u4e2d\u7684\u7279\u5b9a\u6a21\u5f0f\uff1f</li> <li>\u5982\u4f55\u4f7f\u7528 <code>awk</code> \u5904\u7406 CSV \u6587\u4ef6\uff1f</li> </ol>"},{"location":"book/phase2/leetcode/16_3sum_closest.html","title":"LeetCode 16: 3Sum Closest","text":"<p>Problem Link</p>"},{"location":"book/phase2/leetcode/16_3sum_closest.html#problem-description","title":"Problem Description","text":"<p>Given an array <code>nums</code> of n integers and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>. Return the sum of the three integers.</p>"},{"location":"book/phase2/leetcode/16_3sum_closest.html#solution-approaches","title":"Solution Approaches","text":""},{"location":"book/phase2/leetcode/16_3sum_closest.html#1-brute-force-with-optimization-solution","title":"1. Brute Force with Optimization (Solution)","text":"<p>The first approach implements a recursive strategy breaking down the problem into smaller subproblems: - <code>threeSumClosest</code>: Finds the closest triplet sum - <code>twoSumClosest</code>: Finds the closest pair sum - <code>oneClosest</code>: Finds the closest single number</p> <p>Time Complexity: O(n\u00b3) Space Complexity: O(1)</p> <pre><code>class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -&gt; int:\n        assert len(nums)&gt;=3\n        min_value = abs(sum(nums[:3])-target)\n        min_index = [0,1,2]\n        if len(nums)==3:\n            return sum(nums)\n        for i in range(len(nums)-2):\n            min_index_current, min_value_current = self.two_sum_closest(nums[i+1:], target-nums[i])\n            if min_value_current&lt; min_value:\n                min_index = [i, min_index_current[0]+i+1, min_index_current[1]+i+1]\n                min_value = min_value_current\n\n        return sum([nums[j] for j in min_index])\n\n    def two_sum_closest(self, nums: List[int], target:int) -&gt; int:\n        min_value = abs(sum(nums[:2])-target)\n        min_index = [0,1]\n        for i in range(len(nums)-1):\n            min_index_current, min_value_current = self.one_closest(nums[i+1:], target-nums[i])\n            if min_value_current&lt; min_value:\n                min_value = min_value_current\n                min_index =[i,min_index_current+i+1 ]\n        return min_index, min_value\n\n    def one_closest(self, nums: List[int], target:int)-&gt; int:\n        nums_a = [abs(x - target) for x in nums]\n        min_v = min(nums_a)\n        min_index = nums_a.index(min_v)\n        return min_index, min_v\n</code></pre> <p>Simplify it, we can have</p> <pre><code>class Solution2:\n    \"\"\"without y==0, 4279 ms, with y==0, 47ms\"\"\"\n    def threeSumClosest(self, nums: List[int], target: int) -&gt; int:\n        nums.sort()\n        if len(nums)==3:\n            return sum(nums)\n        min_value = sum(nums[:3])\n        largest_value = sum(nums[-3:])\n        if min_value &gt;= target:\n            return min_value\n        if largest_value &lt;= target:\n            return largest_value\n        current_min  = abs(min_value-target)\n        result = min_value\n        for i, x in enumerate(nums[:-2]):\n            current_sum  = self.two_sum_closest(nums[i+1:], target-x) + x\n            y =abs(current_sum - target)\n            if y==0:\n                return current_sum\n            if y  &lt; current_min:\n                current_min = y\n                result = current_sum\n        return result\n\n    def two_sum_closest(self, nums: List[int], target:int) -&gt; int:\n        if len(nums)==2:\n            return sum(nums)\n        min_value = sum(nums[:2])\n        largest_value = sum(nums[-2:])\n        if min_value &gt;= target:\n            return min_value\n        if largest_value &lt;= target:\n            return largest_value\n        current_min  = abs(min_value-target)\n        result = min_value\n        for i, x in enumerate(nums[:-1]):\n            current_sum  = self.one_closest(nums[i+1:], target-x) + x\n            y = abs(current_sum - target)\n            if y==0:\n                return current_sum\n            if y  &lt; current_min:\n                current_min = y\n                result = current_sum\n        return result\n\n    def one_closest(self, nums: List[int], target:int)-&gt; int:\n        return min([(x, abs(target - x)) for x in nums], key = lambda x: x[1])[0]\n</code></pre> <p>For general KSumClosest</p> <pre><code>class Solution3:\n    def threeSumClosest(self, nums: List[int], target: int) -&gt; int:\n        nums.sort()\n        return self.KSumClosest(nums, 3, target)\n\n    def KSumClosest(self, nums: List[int], k: int, target: int) -&gt; int:\n        N = len(nums)\n        if N == k:\n            return sum(nums[:k])\n\n        # target too small\n        current = sum(nums[:k])\n        if current &gt;= target:\n            return current\n\n        # target too big\n        current = sum(nums[-k:])\n        if current &lt;= target:\n            return current\n\n        if k == 1:\n            return min([(x, abs(target - x)) for x in nums], key = lambda x: x[1])[0]\n\n        closest = sum(nums[:k])\n        for i, x in enumerate(nums[:-k+1]):\n            if i&gt;0 and x == nums[i-1]:\n                continue\n            current = self.KSumClosest(nums[i+1:], k-1, target - x) + x\n            if abs(target - current) &lt; abs(target - closest):\n                if current == target:\n                    return target\n                else:\n                    closest = current\n\n        return closest\n</code></pre> <p>The above solutions are theoretically the same. But in practice, they have different speed in leetcode submission.</p> <p></p> <p>The last one is very fast, but this is actually because some edge case handling like the smallest sum and largest sum of the list, also return directly when finding sum equals target. If you remove these edge case termination, it would slow down very much.</p>"},{"location":"book/phase2/leetcode/16_3sum_closest.html#2-optimized-two-pointer-approach-solution2","title":"2. Optimized Two-Pointer Approach (Solution2)","text":"<p>This solution uses sorting and two-pointer technique: 1. Sort the array first 2. Fix one number and use two pointers for the remaining array 3. Move pointers based on sum comparison with target</p> <p>Time Complexity: O(n\u00b2) Space Complexity: O(1) (excluding sort space)</p> <pre><code>class Solution4:\n    def threeSumClosest(self, nums: List[int], target: int) -&gt; int:\n        assert len(nums)&gt;=3\n        nums.sort()\n        if len(nums)==3:\n            return sum(nums)\n        min_value = sum(nums[:3])\n        largest_value = sum(nums[-3:])\n        if min_value &gt;= target:\n            return min_value\n        if largest_value &lt;= target:\n            return largest_value\n\n        result = sum(nums[:3])\n        min_value = abs(result-target)\n        if len(nums)==3:\n            return sum(nums)\n        for i in range(len(nums)-2):\n            current_sum = self.two_sum_closest(nums[i+1:], target-nums[i])\n            if abs(current_sum+nums[i]-target) &lt; min_value:\n                result  = current_sum + nums[i]\n                min_value = abs(result-target)\n                if result==target:\n                    return result\n\n        return result\n\n    def two_sum_closest(self, nums: List[int], target:int) -&gt; int:\n        # use  pointers\n        if len(nums)==2:\n            return sum(nums)\n        min_value = sum(nums[:2])\n        largest_value = sum(nums[-2:])\n        if min_value &gt;= target:\n            return min_value\n        if largest_value &lt;= target:\n            return largest_value\n        result = sum(nums[:2])\n        left, right = 0, len(nums)-1\n        while left &lt; right:\n            sum_2 = nums[left]+nums[right]\n            if abs(sum_2-target) &lt; abs(result-target):\n                result = sum_2\n            if sum_2&lt;target:\n                left+=1\n            elif sum_2&gt;target:\n                right-=1\n            else:\n                return result\n        return result\n</code></pre> <p> Using the termination condition check, we could speed up the code very much.</p>"},{"location":"book/phase2/leetcode/16_3sum_closest.html#understanding-the-two-pointer-approach-in-two_sum_closest","title":"Understanding the Two-Pointer Approach in <code>two_sum_closest</code>","text":"<p>The <code>two_sum_closest</code> function uses a two-pointer technique to find two numbers in a sorted array that sum up closest to the target. Let's break down how it works:</p> <p>Two-Pointer Logic:    <pre><code>left, right = 0, len(nums)-1     # Start from both ends\nwhile left &lt; right:\n    sum_2 = nums[left]+nums[right]\n    if abs(sum_2-target) &lt; abs(result-target):  # Found closer sum\n        result = sum_2\n</code></pre></p> <p>Pointer Movement:    - If sum is too small (<code>sum_2 &lt; target</code>): Move left pointer right to increase sum    - If sum is too large (<code>sum_2 &gt; target</code>): Move right pointer left to decrease sum    - If exact match found (<code>sum_2 == target</code>): Return immediately</p> <p>This approach works because: - The array is sorted, so moving pointers left/right predictably changes the sum - We can eliminate many combinations by moving pointers intelligently - Early termination conditions significantly improve performance</p> <p>Time Complexity: O(n) where n is the length of nums Space Complexity: O(1) as we only use two pointers</p>"},{"location":"book/phase2/leetcode/16_3sum_closest.html#related-leetcode-problems","title":"Related LeetCode Problems","text":"<p>Here are some closely related problems that use similar techniques:</p> <ol> <li> <p>15. 3Sum</p> </li> <li> <p>Find all unique triplets that sum to zero</p> </li> <li>Uses same two-pointer technique</li> <li>Similar time complexity O(n\u00b2)</li> <li> <p>Key difference: Finds exact sum of zero vs. closest sum to target</p> </li> <li> <p>18. 4Sum</p> </li> <li> <p>Extension to finding quadruplets that sum to target</p> </li> <li>Can be solved using similar approach with one more loop</li> <li>Time complexity O(n\u00b3)</li> <li> <p>Shows how k-sum problems can be generalized</p> </li> <li> <p>259. 3Sum Smaller (Premium)</p> </li> <li> <p>Count triplets with sum less than target</p> </li> <li>Uses similar sorting + two-pointer approach</li> <li> <p>Shows how to modify the algorithm for different conditions</p> </li> <li> <p>167. Two Sum II - Input Array Is Sorted</p> </li> <li> <p>Simpler version using just two pointers</p> </li> <li>Good starting point for understanding the technique</li> <li>Direct application of the two-pointer method used in 3Sum Closest</li> </ol> <p>These problems form a family of \"k-sum\" problems, each with slight variations but sharing core techniques: - Sorting the input array - Using multiple pointers - Handling duplicates - Early termination optimizations</p> <p>Practicing these problems together helps build a strong understanding of: - Two-pointer technique - Early termination strategies - Edge case handling - Time/space complexity trade-offs</p>"},{"location":"book/phase2/leetcode/16_3sum_closest.html#time-complexity-lower-bound","title":"Time Complexity Lower Bound","text":"<p>The 3Sum Closest problem has a lower bound of \u03a9(n\u00b2) in the worst case, and here's why:</p> <ol> <li>Relation to 3SUM Problem:</li> <li>3Sum Closest is a generalization of the 3SUM problem</li> <li>3SUM problem (finding three numbers that sum to exactly zero) has a quadratic lower bound</li> <li> <p>Any algorithm solving 3Sum Closest must also be able to solve 3SUM</p> </li> <li> <p>Why O(n) or O(nlogn) is Impossible:</p> </li> <li>To find the closest sum, we must consider all possible triplets</li> <li>There are O(n\u00b3) possible triplets in total</li> <li>Even with sorting and two-pointer technique, we still need to examine O(n\u00b2) pairs</li> <li> <p>Skipping elements can only help with constant factor optimization</p> </li> <li> <p>Theoretical Proofs:</p> </li> <li>Gajentaan and Overmars proved that 3SUM is 3SUM-hard</li> <li>Any significant improvement below O(n\u00b2) would break the 3SUM hardness conjecture</li> <li> <p>This would have major implications for many other computational geometry problems</p> </li> <li> <p>Special Cases:</p> </li> <li>For sorted arrays with special properties, better average-case performance is possible</li> <li>Using randomization or approximation algorithms might give better average-case complexity</li> <li>However, the worst-case bound of \u03a9(n\u00b2) still holds</li> </ol> <p>Therefore, our focus should be on optimizing the constant factors and handling special cases efficiently, rather than trying to achieve sub-quadratic time complexity.</p>"},{"location":"book/phase2/leetcode/16_3sum_closest.html#_1","title":"16 three sum closest","text":""},{"location":"book/phase2/leetcode/18_4sum.html","title":"4Sum: A Deep Dive into Array Manipulation \ud83c\udfaf","text":""},{"location":"book/phase2/leetcode/18_4sum.html#problem-overview","title":"Problem Overview \ud83e\udd14","text":"<p>The 4Sum problem is a classic array manipulation challenge that builds upon the concepts of Two Sum and Three Sum. Let's break down what we're trying to solve!</p> <p>Given an array <code>nums</code> of <code>n</code> integers and a <code>target</code> value, we need to find all unique quadruplets that sum up to the target. It's like finding four puzzle pieces that fit perfectly together! \ud83e\udde9</p>"},{"location":"book/phase2/leetcode/18_4sum.html#problem-constraints","title":"Problem Constraints","text":"<pre><code>1 &lt;= nums.length &lt;= 200\n-109 &lt;= nums[i] &lt;= 109\n-109 &lt;= target &lt;= 109\n</code></pre>"},{"location":"book/phase2/leetcode/18_4sum.html#the-journey-to-an-optimal-solution","title":"The Journey to an Optimal Solution \ud83d\ude80","text":"<p>Let's explore different approaches to solve this problem, starting from a basic solution and gradually optimizing it. Each solution brings something unique to the table!</p>"},{"location":"book/phase2/leetcode/18_4sum.html#solution-1-recursive-approach-with-early-pruning","title":"Solution 1: Recursive Approach with Early Pruning \ud83c\udf33","text":"<p>Our first solution takes a recursive approach, breaking down the 4Sum problem into smaller subproblems. Think of it like a tree where each level represents one number in our quadruplet.</p> <p>Key Insights: - \ud83d\udd0d Sort the array first to handle duplicates and enable pruning - \ud83d\udeab Early pruning using sum checks - \ud83d\udd04 Recursive reduction from 4Sum to 3Sum to 2Sum</p> <pre><code>from typing import List\n\n\nclass Solution:\n    def fourSum(self, nums: List[int], target: int) -&gt; List[List[int]]:\n        nums.sort()\n        results = []\n        if len(nums)&lt;4:\n            return results\n        if sum(nums[:4])&gt; target:\n            return results\n        if sum(nums[-4:])&lt; target:\n            return results\n        for i, num in enumerate(nums[:-3]):\n            current_result = self.three_sum(nums[i+1:], target-nums[i])\n            current_result = [xi + [num] for xi in current_result]\n            results += current_result\n        results = [tuple(x) for x in results]\n        results = list(set(results))\n        results = [list(xi) for xi in results]\n        return results\n\n    def three_sum(self, nums, target):\n        results = []\n        if sum(nums[:3])&gt; target:\n            return results\n        if sum(nums[-3:])&lt; target:\n            return results\n        for i, num in enumerate(nums[:-2]):\n            current_results = self.two_sum(nums[i+1:], target-nums[i])\n            current_results = [xi + [num] for xi in current_results]\n            results += current_results\n        return results\n\n\n\n    def two_sum(self, nums, target):\n        # assume nums is sorted\n        n = len(nums)\n        i = 0\n        j = n-1\n        current_sum = nums[i]+nums[j]\n        results = []\n        if sum(nums[:2]) &gt; target:\n            return results\n        if sum(nums[-2:]) &lt; target:\n            return results\n        while i&lt;j:\n            current_sum = nums[i]+nums[j]\n\n            if current_sum==target:\n                results.append([nums[i], nums[j]])\n                i +=1\n            elif current_sum &lt; target:\n                i += 1\n            else:\n                j -= 1\n        return results\n\n\n\n\nif __name__ == '__main__':\n    nums = [1,0,-1,0,-2,2]\n    target = 0\n    s = Solution()\n    y = s.fourSum(nums=nums,target=target)\n    print(y)\n</code></pre> <p>This solution works by: 1. \ud83d\udcca Sorting the array first 2. \u2702\ufe0f Pruning impossible cases early (if smallest 4 sum &gt; target or largest 4 sum &lt; target) 3. \ud83d\udd01 Using recursion to break down the problem 4. \ud83c\udfaf Handling duplicates with set conversion</p>"},{"location":"book/phase2/leetcode/18_4sum.html#solution-2-optimizing-two-sum-with-early-return","title":"Solution 2: Optimizing Two Sum with Early Return \ud83c\udfc3\u200d\u2642\ufe0f","text":"<p>In our second solution, we made a key optimization in the two_sum function. By adding an early return when we find a match, we can speed up the process significantly!</p> <p>What Changed: - \u26a1 Added <code>j -= 1</code> for faster traversal - \ud83c\udfaf Early return on match - \ud83d\udd04 Maintained the same overall structure</p> <pre><code>    def two_sum(self, nums, target):\n        # assume nums is sorted\n        n = len(nums)\n        i = 0\n        j = n-1\n        current_sum = nums[i]+nums[j]\n        results = []\n        if sum(nums[:2]) &gt; target:\n            return results\n        if sum(nums[-2:]) &lt; target:\n            return results\n        while i&lt;j:\n            current_sum = nums[i]+nums[j]\n\n            if current_sum==target:\n                results.append([nums[i], nums[j]])\n                i +=1\n                j -=1 # Since we dont need to care the duplicatesd\n            elif current_sum &lt; target:\n                i += 1\n            else:\n                j -= 1\n        return results\n</code></pre> <p>The results speak for themselves: </p>"},{"location":"book/phase2/leetcode/18_4sum.html#solution-3-smart-duplicate-handling","title":"Solution 3: Smart Duplicate Handling \ud83e\udde0","text":"<p>Our third solution introduces smart duplicate handling, which significantly improves performance by skipping redundant calculations.</p> <p>Key Improvements: - \ud83c\udfc3\u200d\u2642\ufe0f Skip duplicate values - \ud83c\udfaf More efficient pointer movement - \ud83d\udca1 Smarter comparison logic</p> <pre><code>    def two_sum(self, nums, target):\n        # assume nums is sorted\n        n = len(nums)\n        i = 0\n        j = n-1\n        results = []\n        if sum(nums[:2]) &gt; target:\n            return results\n        if sum(nums[-2:]) &lt; target:\n            return results\n        while i&lt;j:\n            current_sum = nums[i]+nums[j]\n            if current_sum==target:\n                results.append([nums[i], nums[j]])\n                i +=1\n                while i &lt; j and nums[i] == nums[i-1]:\n                    i += 1\n                j -=1\n                while i&lt;j and nums[j]==nums[j+1]:\n                    j -= 1\n            elif current_sum &lt; target:\n                i += 1\n\n            else:\n                j -= 1\n</code></pre> <p>Performance improvement shown here: </p>"},{"location":"book/phase2/leetcode/18_4sum.html#solution-4-the-ultimate-optimization","title":"Solution 4: The Ultimate Optimization \ud83c\udfc6","text":"<p>Finally, we reached our most optimized solution using recursion with smart pruning and efficient duplicate handling.</p> <p>Advanced Features: - \ud83d\ude80 Early termination conditions - \ud83c\udfaf Smart pointer management - \ud83d\udd04 Efficient recursive approach - \ud83e\uddee Optimized memory usage</p> <pre><code>class Solution5:\n    def fourSum(self, nums, target):\n        def findNsum(l, r, target, N, result, results):\n            if r-l+1 &lt; N or N &lt; 2 or target &lt; nums[l]*N or target &gt; nums[r]*N:  # early termination\n                return\n            if N == 2: # two pointers solve sorted 2-sum problem\n                results += [result+x for x in self.two_sum(l,r,nums, target)]\n            else: # recursively reduce N\n                for i in range(l, r+1):\n                    if i == l or (i &gt; l and nums[i-1] != nums[i]):\n                        findNsum(i+1, r, target-nums[i], N-1, result+[nums[i]], results)\n\n        nums.sort()\n        results = []\n        findNsum(0, len(nums)-1, target, 4, [], results)\n        return results\n\n    def two_sum(self,l,r, nums, target):\n        results =[]\n        while l &lt; r:\n            s = nums[l] + nums[r]\n            if s == target:\n                results.append([nums[l], nums[r]])\n                l += 1\n                while l &lt; r and nums[l] == nums[l-1]:\n                    l += 1\n                r -=1\n                while l&lt;r and nums[r] ==nums[r+1]:\n                    r -= 1\n            elif s &lt; target:\n                l += 1\n            else:\n                r -= 1\n        return results\n</code></pre> <p>Final performance results: </p>"},{"location":"book/phase2/leetcode/18_4sum.html#time-complexity-analysis","title":"Time Complexity Analysis \ud83d\udcca","text":"<p>Let's break down the complexity of our solutions: - Base Solution: O(n\u00b3) - Three nested loops with binary search - Optimized Solution: Still O(n\u00b3) but with much better constant factors due to:   - Early pruning \ud83d\udeab   - Duplicate skipping \u23ed\ufe0f   - Smart pointer management \ud83d\udc46</p>"},{"location":"book/phase2/leetcode/18_4sum.html#key-takeaways","title":"Key Takeaways \ud83d\udca1","text":"<ol> <li>Early Pruning is crucial for performance</li> <li>Smart Duplicate Handling can significantly reduce unnecessary calculations</li> <li>Pointer Management is key in array problems</li> <li>Space-Time Tradeoffs are important considerations</li> </ol>"},{"location":"book/phase2/leetcode/18_4sum.html#practice-tips","title":"Practice Tips \ud83d\udcdd","text":"<ol> <li>\ud83c\udfaf Start with the basic solution and understand it thoroughly</li> <li>\ud83d\udd04 Practice with different input sizes</li> <li>\ud83e\uddea Test edge cases carefully</li> <li>\ud83d\udcca Compare performance with different approaches</li> </ol>"},{"location":"book/phase2/leetcode/18_4sum.html#related-problems","title":"Related Problems \ud83d\udd17","text":"<p>Want to master array manipulation and sum problems? Here are some related LeetCode problems to practice:</p>"},{"location":"book/phase2/leetcode/18_4sum.html#two-sum-family","title":"Two Sum Family \ud83d\udc65","text":"<ol> <li>Two Sum (Easy)</li> <li>The classic problem that started it all</li> <li>Find two numbers that add up to target</li> <li> <p>Great starting point for understanding the basics</p> </li> <li> <p>Two Sum II - Input Array Is Sorted (Medium)</p> </li> <li>Similar to Two Sum but with sorted input</li> <li>Uses two-pointer technique</li> <li>Good practice for optimizing with sorted arrays</li> </ol>"},{"location":"book/phase2/leetcode/18_4sum.html#three-sum-family","title":"Three Sum Family \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66","text":"<ol> <li>3Sum (Medium)</li> <li>Find triplets that sum to zero</li> <li>Natural progression from Two Sum</li> <li> <p>Introduces duplicate handling</p> </li> <li> <p>3Sum Closest (Medium)</p> </li> <li>Find triplet with sum closest to target</li> <li>Similar approach but different goal</li> <li>Good for understanding approximation problems</li> </ol>"},{"location":"book/phase2/leetcode/18_4sum.html#four-sum-and-beyond","title":"Four Sum and Beyond \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66","text":"<ol> <li>4Sum II (Medium)</li> <li>Four arrays instead of one</li> <li>Uses hash map approach</li> <li> <p>Different take on the 4Sum problem</p> </li> <li> <p>K Sum (Hard)</p> </li> <li>Generalized version for K numbers</li> <li>Tests understanding of recursive solutions</li> <li>Advanced problem combining multiple concepts</li> </ol>"},{"location":"book/phase2/leetcode/18_4sum.html#similar-pattern-problems","title":"Similar Pattern Problems \ud83c\udfaf","text":"<ol> <li>Combination Sum (Medium)</li> <li>Find combinations that sum to target</li> <li>Uses backtracking</li> <li> <p>Different approach to sum problems</p> </li> <li> <p>Subarray Sum Equals K (Medium)</p> </li> <li>Continuous subarray summing to target</li> <li>Uses prefix sum technique</li> <li>Different perspective on sum problems</li> </ol>"},{"location":"book/phase2/leetcode/18_4sum.html#problem-solving-tips-for-sum-problems","title":"Problem-Solving Tips for Sum Problems \ud83d\udca1","text":"<ol> <li>Always consider sorting the array first if order doesn't matter</li> <li>Two-pointer technique is powerful for sorted arrays</li> <li>Hash maps can often optimize brute force solutions</li> <li>Watch out for duplicates and overflow cases</li> <li>Consider space-time tradeoffs in your solutions</li> </ol> <p>Keep practicing these problems to build a strong foundation in array manipulation and algorithmic thinking! \ud83d\udcaa</p>"},{"location":"book/phase2/python_basics/01_basic_syntax.html","title":"Basic Syntax","text":""},{"location":"book/phase2/python_basics/01_basic_syntax.html#concept-explanation","title":"Concept Explanation","text":"<p>Python's basic syntax includes variable definitions, data types, control structures, and more.</p>"},{"location":"book/phase2/python_basics/01_basic_syntax.html#parameter-explanation","title":"Parameter Explanation","text":"<ul> <li>Variables : Used to store data.</li> <li><code>x = 5</code>: Define an integer variable.</li> <li>Data Types : Such as integers, strings, lists.</li> <li><code>type(x)</code>: Get variable type.</li> <li>Control Structures : Such as conditional statements and loops.</li> <li><code>if</code>: Conditional statements.</li> <li><code>for</code>: Loops.</li> </ul>"},{"location":"book/phase2/python_basics/01_basic_syntax.html#practical-examples","title":"Practical Examples","text":"<ol> <li>Define a variable and print its value:    <pre><code>x = 10\nprint(x)\n</code></pre></li> <li>Use <code>if</code> statement for condition checking:    <pre><code>if x &gt; 5:\n    print(\"x is greater than 5\")\n</code></pre></li> <li>Use <code>for</code> loop to iterate through a list:    <pre><code>for i in [1, 2, 3]:\n    print(i)\n</code></pre></li> </ol>"},{"location":"book/phase2/python_basics/01_basic_syntax.html#practice-questions","title":"Practice Questions","text":"<ol> <li>How do you define a string variable?</li> <li>Which function is used to get the type of a variable?</li> <li>How do you write a simple <code>if</code> statement?</li> </ol>"},{"location":"book/phase2/python_basics/02_functions_modules.html","title":"\u51fd\u6570\u4e0e\u6a21\u5757","text":""},{"location":"book/phase2/python_basics/02_functions_modules.html#_2","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>\u51fd\u6570\u662f\u53ef\u91cd\u7528\u7684\u4ee3\u7801\u5757\uff0c\u6a21\u5757\u662f\u5305\u542b\u51fd\u6570\u548c\u53d8\u91cf\u7684\u6587\u4ef6\u3002</p>"},{"location":"book/phase2/python_basics/02_functions_modules.html#_3","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li>\u51fd\u6570\u5b9a\u4e49\uff1a\u4f7f\u7528 <code>def</code> \u5173\u952e\u5b57\u3002</li> <li><code>def func_name():</code>\uff1a\u5b9a\u4e49\u51fd\u6570\u3002</li> <li>\u6a21\u5757\u5bfc\u5165\uff1a\u4f7f\u7528 <code>import</code> \u5173\u952e\u5b57\u3002</li> <li><code>import math</code>\uff1a\u5bfc\u5165\u6570\u5b66\u6a21\u5757\u3002</li> </ul>"},{"location":"book/phase2/python_basics/02_functions_modules.html#_4","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":"<ol> <li>\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\uff1a    <pre><code>def greet():\n    print(\"Hello!\")\n</code></pre></li> <li>\u8c03\u7528\u51fd\u6570\uff1a    <pre><code>greet()\n</code></pre></li> <li>\u5bfc\u5165\u6a21\u5757\u5e76\u4f7f\u7528\u51fd\u6570\uff1a    <pre><code>import math\nprint(math.sqrt(16))\n</code></pre></li> </ol>"},{"location":"book/phase2/python_basics/02_functions_modules.html#_5","title":"\u6d4b\u8bd5\u9898\u76ee","text":"<ol> <li>\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff1f</li> <li>\u4f7f\u7528\u54ea\u4e2a\u5173\u952e\u5b57\u53ef\u4ee5\u5bfc\u5165\u6a21\u5757\uff1f</li> <li>\u5982\u4f55\u8c03\u7528\u4e00\u4e2a\u5df2\u5b9a\u4e49\u7684\u51fd\u6570\uff1f</li> </ol>"},{"location":"book/phase2/python_basics/03_classes_objects.html","title":"\u7c7b\u4e0e\u5bf9\u8c61","text":""},{"location":"book/phase2/python_basics/03_classes_objects.html#_2","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>\u7c7b\u662f\u5bf9\u8c61\u7684\u84dd\u56fe\uff0c\u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002</p>"},{"location":"book/phase2/python_basics/03_classes_objects.html#_3","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li>\u7c7b\u5b9a\u4e49\uff1a\u4f7f\u7528 <code>class</code> \u5173\u952e\u5b57\u3002</li> <li><code>class MyClass:</code>\uff1a\u5b9a\u4e49\u7c7b\u3002</li> <li>\u5bf9\u8c61\u521b\u5efa\uff1a\u901a\u8fc7\u7c7b\u5b9e\u4f8b\u5316\u3002</li> <li><code>obj = MyClass()</code>\uff1a\u521b\u5efa\u5bf9\u8c61\u3002</li> </ul>"},{"location":"book/phase2/python_basics/03_classes_objects.html#_4","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":"<ol> <li>\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\uff1a    <pre><code>class Dog:\n    def bark(self):\n        print(\"Woof!\")\n</code></pre></li> <li>\u521b\u5efa\u5bf9\u8c61\u5e76\u8c03\u7528\u65b9\u6cd5\uff1a    <pre><code>my_dog = Dog()\nmy_dog.bark()\n</code></pre></li> </ol>"},{"location":"book/phase2/python_basics/03_classes_objects.html#_5","title":"\u6d4b\u8bd5\u9898\u76ee","text":"<ol> <li>\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u5e26\u6709\u5c5e\u6027\u7684\u7c7b\uff1f</li> <li>\u4f7f\u7528\u54ea\u4e2a\u5173\u952e\u5b57\u53ef\u4ee5\u5b9a\u4e49\u7c7b\uff1f</li> <li>\u5982\u4f55\u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\uff1f</li> </ol>"},{"location":"book/phase2/python_basics/04_common_libraries.html","title":"\u5e38\u7528\u5e93","text":""},{"location":"book/phase2/python_basics/04_common_libraries.html#_2","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>Python \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u5e93\u6765\u6269\u5c55\u5176\u529f\u80fd\uff0c\u5982 <code>numpy</code>\u3001<code>pandas</code>\u3002</p>"},{"location":"book/phase2/python_basics/04_common_libraries.html#_3","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li><code>numpy</code>\uff1a\u7528\u4e8e\u6570\u503c\u8ba1\u7b97\u3002</li> <li><code>numpy.array</code>\uff1a\u521b\u5efa\u6570\u7ec4\u3002</li> <li><code>pandas</code>\uff1a\u7528\u4e8e\u6570\u636e\u5904\u7406\u3002</li> <li><code>pandas.DataFrame</code>\uff1a\u521b\u5efa\u6570\u636e\u6846\u3002</li> </ul>"},{"location":"book/phase2/python_basics/04_common_libraries.html#_4","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":"<ol> <li>\u4f7f\u7528 <code>numpy</code> \u521b\u5efa\u6570\u7ec4\uff1a    <pre><code>import numpy as np\narr = np.array([1, 2, 3])\nprint(arr)\n</code></pre></li> <li>\u4f7f\u7528 <code>pandas</code> \u521b\u5efa\u6570\u636e\u6846\uff1a    <pre><code>import pandas as pd\ndf = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\nprint(df)\n</code></pre></li> </ol>"},{"location":"book/phase2/python_basics/04_common_libraries.html#_5","title":"\u6d4b\u8bd5\u9898\u76ee","text":"<ol> <li>\u5982\u4f55\u4f7f\u7528 <code>numpy</code> \u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff1f</li> <li>\u4f7f\u7528\u54ea\u4e2a\u51fd\u6570\u53ef\u4ee5\u521b\u5efa <code>pandas</code> \u6570\u636e\u6846\uff1f</li> <li>\u5982\u4f55\u5bfc\u5165 <code>numpy</code> \u5e93\uff1f</li> </ol>"},{"location":"book/phase2/python_basics/05_best_practices.html","title":"Python \u7684\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"book/phase2/python_basics/05_best_practices.html#_1","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>\u6700\u4f73\u5b9e\u8df5\u5305\u62ec\u4ee3\u7801\u98ce\u683c\u3001\u6d4b\u8bd5\u548c\u8c03\u8bd5\u7b49\u3002</p>"},{"location":"book/phase2/python_basics/05_best_practices.html#_2","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li>\u4ee3\u7801\u98ce\u683c\uff1a\u9075\u5faa PEP 8 \u6807\u51c6\u3002</li> <li>\u7f29\u8fdb\uff1a\u4f7f\u7528 4 \u4e2a\u7a7a\u683c\u3002</li> <li>\u6d4b\u8bd5\uff1a\u4f7f\u7528 <code>unittest</code> \u6a21\u5757\u3002</li> <li><code>assertEqual</code>\uff1a\u65ad\u8a00\u76f8\u7b49\u3002</li> </ul>"},{"location":"book/phase2/python_basics/05_best_practices.html#_3","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":"<ol> <li>\u7f16\u5199\u7b26\u5408 PEP 8 \u7684\u4ee3\u7801\uff1a    <pre><code>def add(a, b):\n    return a + b\n</code></pre></li> <li>\u4f7f\u7528 <code>unittest</code> \u8fdb\u884c\u6d4b\u8bd5\uff1a    <pre><code>import unittest\nclass TestMath(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)\n</code></pre></li> </ol>"},{"location":"book/phase2/python_basics/05_best_practices.html#_4","title":"\u6d4b\u8bd5\u9898\u76ee","text":"<ol> <li>\u5982\u4f55\u786e\u4fdd\u4ee3\u7801\u7b26\u5408 PEP 8 \u6807\u51c6\uff1f</li> <li>\u4f7f\u7528\u54ea\u4e2a\u6a21\u5757\u53ef\u4ee5\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\uff1f</li> <li>\u5982\u4f55\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f</li> </ol>"},{"location":"book/phase2/python_basics/06_algorithms_techniques.html","title":"\u5e38\u7528\u7b97\u6cd5\u4e0e\u6280\u5de7","text":""},{"location":"book/phase2/python_basics/06_algorithms_techniques.html#_2","title":"\u6982\u5ff5\u7684\u89e3\u91ca","text":"<p>\u7b97\u6cd5\u662f\u89e3\u51b3\u95ee\u9898\u7684\u6b65\u9aa4\uff0c\u6280\u5de7\u662f\u7f16\u7a0b\u4e2d\u7684\u5c0f\u7a8d\u95e8\u3002</p>"},{"location":"book/phase2/python_basics/06_algorithms_techniques.html#_3","title":"\u53c2\u6570\u7684\u89e3\u91ca","text":"<ul> <li>\u6392\u5e8f\u7b97\u6cd5\uff1a\u5982\u5feb\u901f\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3002</li> <li><code>sorted()</code>\uff1a\u5185\u7f6e\u6392\u5e8f\u51fd\u6570\u3002</li> <li>\u641c\u7d22\u7b97\u6cd5\uff1a\u5982\u4e8c\u5206\u67e5\u627e\u3002</li> <li><code>bisect</code>\uff1a\u7528\u4e8e\u4e8c\u5206\u67e5\u627e\u7684\u6a21\u5757\u3002</li> </ul>"},{"location":"book/phase2/python_basics/06_algorithms_techniques.html#_4","title":"\u5b9e\u8df5\u7684\u4f8b\u5b50","text":"<ol> <li>\u4f7f\u7528 <code>sorted()</code> \u5bf9\u5217\u8868\u6392\u5e8f\uff1a    <pre><code>numbers = [3, 1, 4, 1, 5]\nsorted_numbers = sorted(numbers)\nprint(sorted_numbers)\n</code></pre></li> <li>\u4f7f\u7528 <code>bisect</code> \u8fdb\u884c\u4e8c\u5206\u67e5\u627e\uff1a    <pre><code>import bisect\nindex = bisect.bisect_left(numbers, 4)\nprint(index)\n</code></pre></li> </ol>"},{"location":"book/phase2/python_basics/06_algorithms_techniques.html#_5","title":"\u6d4b\u8bd5\u9898\u76ee","text":"<ol> <li>\u5982\u4f55\u4f7f\u7528 <code>sorted()</code> \u5bf9\u5b57\u5178\u6309\u503c\u6392\u5e8f\uff1f</li> <li>\u4f7f\u7528\u54ea\u4e2a\u6a21\u5757\u53ef\u4ee5\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\uff1f</li> <li>\u5982\u4f55\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u6392\u5e8f\u7b97\u6cd5\uff1f</li> </ol>"}]}